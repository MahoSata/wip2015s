<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="18:SyncLogAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f0265097020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f02644f70c0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.2/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f02644f70c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f02644f3930"/></to>
    </wire>
    <wire loc="19:SyncLogAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f026508a3e0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f0264e000c0"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f0264e000c0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f0264c4d080"/></to>
    </wire>
    <wire loc="20:SyncLogAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x7f0265059c08"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f0264fbe350"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f0264fbe350"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f0264fb8e28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:SyncLogAppC.nc">
      <from><interface-ref name="Timer1" scoped="" ref="0x7f0265056d20"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f0264c3a8d8"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f0264c3a8d8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f0264fb8e28"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:SyncLogAppC.nc">
      <from><interface-ref name="LogWrite" scoped="" ref="0x7f026506bc38"/></from>
      <to><interface-ref name="LogWrite" scoped="" ref="0x7f02648f2d40"/></to>
    </wire>
    <wire loc="39:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
      <from><interface-ref name="LogWrite" scoped="" ref="0x7f02648f2d40"/></from>
      <to><interface-ref name="LogWrite" scoped="" ref="0x7f0264c0c4f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="23:SyncLogAppC.nc">
      <from><interface-ref name="LogRead" scoped="" ref="0x7f02650627b0"/></from>
      <to><interface-ref name="LogRead" scoped="" ref="0x7f02648f1c50"/></to>
    </wire>
    <wire loc="40:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
      <from><interface-ref name="LogRead" scoped="" ref="0x7f02648f1c50"/></from>
      <to><interface-ref name="LogRead" scoped="" ref="0x7f0264c0e208"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="24:SyncLogAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f0264fe24c0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f02648ebc30"/>
      <arguments>
        <value cst="I:139">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="25:SyncLogAppC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x7f0265086bc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f02648eec58"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f02648eec58"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f026485f2e8"/></to>
    </wire>
    <wire loc="30:SyncLogC.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0x7f0264fe4020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.2/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f0264fb8e28"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f0264fad1c8"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f0264fad1c8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f0264e215e0"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264e00788"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x7f026467f7e0"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264e00788"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x7f026467a688"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264e00788"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f02646ec610"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264e00788"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f0264862b98"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264e00788"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f02640f29c8"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264e00788"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f0264ac6ca0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.2/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264e00788"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f0264faa4a0"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f0264faa4a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f0264f9f020"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f0264fa3980"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f0264e11128"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f0264f9f020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f0264e9a148"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f0264e1b858"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f0264e6dab0"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f0264e68c70"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x7f0264f97838"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x7f0264f97838"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f0264e9a8f0"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f0264e08330"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x7f0264f90e40"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x7f0264f90e40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f0264e96a90"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f0264e96a90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f02644b4128"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f0264e9a148"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f02644b9668"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f0264e9a8f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f02644b9e10"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f02644af228"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f0264f0fa08"/></to>
    </wire>
    <wire loc="94:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f0264f0fa08"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f0264efe5d0"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f02644aa0c0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f0264f08a98"/></to>
    </wire>
    <wire loc="95:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f0264f08a98"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f0264ef95c0"/></to>
    </wire>
    <wire loc="76:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f02644a93b0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f0264f07e18"/></to>
    </wire>
    <wire loc="96:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f0264f07e18"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f0264ef8980"/></to>
    </wire>
    <wire loc="77:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f02644a5510"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f0264f02228"/></to>
    </wire>
    <wire loc="97:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f0264f02228"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f0264ef33d0"/></to>
    </wire>
    <wire loc="92:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f02650b4988"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f0264ef4b78"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f0264e64cf0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f0264e16930"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f0264c4d6b8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f02651895c8"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.2/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f02651895c8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f02650d6d88"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.2/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f0264c4c0e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f0264dfc020"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f0264dfc020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f0264df3020"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264c4c7a8"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264e00788"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.1.2/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f0264dfbb68"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f026455e940"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f0264dfbb68"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f02649c6d30"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f0264df6e68"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f0264c6cae0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x7f0264df3d88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f0264c6c4b0"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f0264df36c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f02644d05e8"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f0264df36c0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f0264df5558"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f0264df5558"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f0264de8020"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f0264df5be8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f0264dfbb68"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x7f0264de1388"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x7f0264dd7e00"/></to>
    </wire>
    <wire loc="141:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x7f0264dd7e00"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f0264d52430"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f0264de74f8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f0264df5be8"/></to>
    </wire>
    <wire loc="191:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x7f0264da4968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264cbe520"/></to>
    </wire>
    <wire loc="165:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x7f0264dbe4d0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f0264d29020"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f0264d29020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02642e2480"/></to>
    </wire>
    <wire loc="176:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x7f0264db34d0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f0264d18d60"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f0264d18d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264275480"/></to>
    </wire>
    <wire loc="185:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x7f0264daa1a0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f0264d098c8"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f0264d098c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264205480"/></to>
    </wire>
    <wire loc="196:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x7f0264d9e658"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264ca5c38"/></to>
    </wire>
    <wire loc="143:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x7f0264dd41a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f0264d50740"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f0264d50740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264409480"/></to>
    </wire>
    <wire loc="183:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x7f0264dade00"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f0264d0b5b8"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f0264d0b5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026420b480"/></to>
    </wire>
    <wire loc="146:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x7f0264dd24d0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f0264d48930"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f0264d48930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02643b33e0"/></to>
    </wire>
    <wire loc="157:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x7f0264dc7658"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f0264d37740"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f0264d37740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264346480"/></to>
    </wire>
    <wire loc="168:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x7f0264dbb968"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f0264d25430"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f0264d25430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02642d9480"/></to>
    </wire>
    <wire loc="179:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x7f0264db0968"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f0264d14120"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f0264d14120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026426c480"/></to>
    </wire>
    <wire loc="138:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x7f0264ddb968"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f0264d55020"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f0264d55020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264419480"/></to>
    </wire>
    <wire loc="149:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x7f0264dcf968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f0264d45d60"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f0264d45d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02643aa480"/></to>
    </wire>
    <wire loc="160:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x7f0264dc4af0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f0264d34bd8"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f0264d34bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026433d480"/></to>
    </wire>
    <wire loc="171:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x7f0264db8e00"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f0264d228c8"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f0264d228c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02642cf480"/></to>
    </wire>
    <wire loc="188:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x7f0264da7658"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f0264d06d60"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f0264d06d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02641fc480"/></to>
    </wire>
    <wire loc="194:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x7f0264da0348"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264cafc38"/></to>
    </wire>
    <wire loc="174:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x7f0264db51a0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f0264d1aa50"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f0264d1aa50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026427b480"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f0264d52430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264410480"/></to>
    </wire>
    <wire loc="152:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x7f0264dcb020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f0264d41120"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f0264d41120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02643a0480"/></to>
    </wire>
    <wire loc="192:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x7f0264da2020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264cb9cd8"/></to>
    </wire>
    <wire loc="155:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x7f0264dc9348"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f0264d39500"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f0264d39500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026434c3e0"/></to>
    </wire>
    <wire loc="166:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x7f0264dbd658"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f0264d28120"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f0264d28120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02642df480"/></to>
    </wire>
    <wire loc="177:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x7f0264db2658"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f0264d17e18"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f0264d17e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264272480"/></to>
    </wire>
    <wire loc="186:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x7f0264da9348"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f0264d08a50"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f0264d08a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264202480"/></to>
    </wire>
    <wire loc="144:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x7f0264dd3348"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f0264d4f8c8"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f0264d4f8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264406480"/></to>
    </wire>
    <wire loc="147:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x7f0264dd1658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f0264d47a50"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f0264d47a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02643b0480"/></to>
    </wire>
    <wire loc="158:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x7f0264dc67e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f0264d368c8"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f0264d368c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264343480"/></to>
    </wire>
    <wire loc="169:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x7f0264dbaaf0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f0264d245b8"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f0264d245b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02642d6480"/></to>
    </wire>
    <wire loc="180:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x7f0264dafaf0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f0264d132a8"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f0264d132a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264268480"/></to>
    </wire>
    <wire loc="139:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x7f0264dd9af0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f0264d54120"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f0264d54120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264416480"/></to>
    </wire>
    <wire loc="150:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x7f0264dceaf0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f0264d44e18"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f0264d44e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02643a7480"/></to>
    </wire>
    <wire loc="161:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x7f0264dc3c78"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f0264d32d60"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f0264d32d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264339480"/></to>
    </wire>
    <wire loc="189:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x7f0264da67e0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f0264d05e18"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f0264d05e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02641f9480"/></to>
    </wire>
    <wire loc="164:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x7f0264dbf020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f0264d2be40"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f0264d2be40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02642e53e0"/></to>
    </wire>
    <wire loc="175:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x7f0264db4348"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f0264d19bd8"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f0264d19bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264278480"/></to>
    </wire>
    <wire loc="184:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x7f0264dab020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f0264d0a740"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f0264d0a740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264208480"/></to>
    </wire>
    <wire loc="195:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x7f0264d9f4d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264ca93e0"/></to>
    </wire>
    <wire loc="142:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x7f0264dd5020"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f0264d515b8"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f0264d515b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026440c480"/></to>
    </wire>
    <wire loc="153:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x7f0264dca1a0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f0264d402a8"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f0264d402a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026439d480"/></to>
    </wire>
    <wire loc="182:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x7f0264daec78"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f0264d0c500"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f0264d0c500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026420e3e0"/></to>
    </wire>
    <wire loc="156:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x7f0264dc84d0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f0264d385b8"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f0264d385b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264349480"/></to>
    </wire>
    <wire loc="167:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x7f0264dbc7e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f0264d262a8"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f0264d262a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02642dc480"/></to>
    </wire>
    <wire loc="178:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x7f0264db17e0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f0264d15020"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f0264d15020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026426f480"/></to>
    </wire>
    <wire loc="187:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x7f0264da84d0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f0264d07bd8"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f0264d07bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02641ff480"/></to>
    </wire>
    <wire loc="137:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x7f0264dec790"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f0264d57dc0"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f0264d57dc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026441c3e0"/></to>
    </wire>
    <wire loc="148:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x7f0264dd07e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f0264d46bd8"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f0264d46bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02643ad480"/></to>
    </wire>
    <wire loc="159:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x7f0264dc5968"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f0264d35a50"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f0264d35a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264340480"/></to>
    </wire>
    <wire loc="170:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x7f0264db9c78"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f0264d23740"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f0264d23740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02642d3480"/></to>
    </wire>
    <wire loc="193:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x7f0264da11a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264cb43e0"/></to>
    </wire>
    <wire loc="173:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x7f0264db6020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f0264d1b930"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f0264d1b930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f026427e3e0"/></to>
    </wire>
    <wire loc="162:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x7f0264dc2e00"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f0264d31e18"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f0264d31e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264336480"/></to>
    </wire>
    <wire loc="140:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x7f0264dd8c78"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f0264d532a8"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f0264d532a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f0264413480"/></to>
    </wire>
    <wire loc="151:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x7f0264dcde00"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f0264d42020"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f0264d42020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f02643a4480"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.2/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02650d5c58"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.1.2/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f02650d1168"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f0265188e28"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
      <from><interface-ref name="At45dbVolume" scoped="" ref="0x7f0264bf71c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="At45dbVolume" scoped="" ref="0x7f02648f9780"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="volume_id_t" ref="0x7f026508cc40"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f0264bf61c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f0264aca598"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:/opt/tinyos-2.1.2/tos/chips/at45db/WireLogStorageP.nc">
      <from><interface-ref name="At45db" scoped="" ref="0x7f0264bf8398"/></from>
      <to><interface-ref name="At45db" scoped="" ref="0x7f0264acc140"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <from><interface-ref name="At45db" scoped="" ref="0x7f0264acc140"/></from>
      <to><interface-ref name="At45db" scoped="" ref="0x7f0264abe2a8"/></to>
    </wire>
    <wire loc="38:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f0264ac3470"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f02649034a8"/></to>
    </wire>
    <wire loc="107:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f02649034a8"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f02640ee4c0"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f0264aca598"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f0264904020"/></to>
    </wire>
    <wire loc="105:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f0264904020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f02640ef060"/></to>
    </wire>
    <wire loc="39:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f0264ac17d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f02649020e0"/></to>
    </wire>
    <wire loc="108:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f02649020e0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f02640ed0e0"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <from><interface-ref name="HplAt45db" scoped="" ref="0x7f0264aa6ab0"/></from>
      <to><interface-ref name="HplAt45db" scoped="" ref="0x7f0264a21e58"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.1.2/tos/platforms/mica/chips/at45db/HplAt45dbC.nc">
      <from><interface-ref name="HplAt45db" scoped="" ref="0x7f0264a21e58"/></from>
      <to><interface-ref name="HplAt45db" scoped="" ref="0x7f0264a1a6c0"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f0264aa2a58"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f0264995b98"/></to>
    </wire>
    <wire loc="145:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc">
      <from><interface-ref name="taskSuccess" scoped="" ref="0x7f0264a8d4d8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc">
      <from><interface-ref name="taskFail" scoped="" ref="0x7f0264a8b190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="28:/opt/tinyos-2.1.2/tos/platforms/mica/chips/at45db/HplAt45dbC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f02649ceb70"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f02649c8360"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f02649c8360"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f026498daa8"/></to>
    </wire>
    <wire loc="29:/opt/tinyos-2.1.2/tos/platforms/mica/chips/at45db/HplAt45dbC.nc">
      <from><interface-ref name="FlashSpi" scoped="" ref="0x7f02649cd8c8"/></from>
      <to><interface-ref name="FlashSpi" scoped="" ref="0x7f02649c7020"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <from><interface-ref name="FlashSpi" scoped="" ref="0x7f02649c7020"/></from>
      <to><interface-ref name="FlashSpi" scoped="" ref="0x7f02649c3400"/></to>
    </wire>
    <wire loc="30:/opt/tinyos-2.1.2/tos/platforms/mica/chips/at45db/HplAt45dbC.nc">
      <from><interface-ref name="HplAt45dbByte" scoped="" ref="0x7f02649cde60"/></from>
      <to><interface-ref name="HplAt45dbByte" scoped="" ref="0x7f02649c7640"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <from><interface-ref name="HplAt45dbByte" scoped="" ref="0x7f02649c7640"/></from>
      <to><interface-ref name="HplAt45dbByte" scoped="" ref="0x7f02649c3a20"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <from><interface-ref name="Select" scoped="" ref="0x7f02649c1860"/></from>
      <to><interface-ref name="PortA3" scoped="" ref="0x7f0264dd8c78"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <from><interface-ref name="Clk" scoped="" ref="0x7f02649c0ad0"/></from>
      <to><interface-ref name="PortD5" scoped="" ref="0x7f0264dbaaf0"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <from><interface-ref name="In" scoped="" ref="0x7f02649bedd8"/></from>
      <to><interface-ref name="PortD2" scoped="" ref="0x7f0264dbd658"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <from><interface-ref name="Out" scoped="" ref="0x7f02649bfc58"/></from>
      <to><interface-ref name="PortD3" scoped="" ref="0x7f0264dbc7e0"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f02649bc1e0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f0264995b98"/></to>
    </wire>
    <wire loc="163:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <from><interface-ref name="avail" scoped="" ref="0x7f026499fbf8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="25:/opt/tinyos-2.1.2/tos/system/NoArbiterC.nc">
      <from><interface-ref name="granted" scoped="" ref="0x7f026497c020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f0264904d18"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f02640efd58"/></to>
    </wire>
    <wire loc="109:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f02640ed980"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f0264902960"/></to>
    </wire>
    <wire loc="111:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f02640ec130"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f02640f1020"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f02640e92e8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f026485f2e8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f0264856a00"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f02648ebc30"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f02648c2b60"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f02648e8020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f0264866578"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f02648e39c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f02648699a8"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f02648c5a80"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f0264865268"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f02648cb8a0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f0264868020"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f0264862b98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f02648563e8"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f026485c5a8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f02648ca480"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f0264865bb0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f026485ece8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f02648648c8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f026485e270"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f0264857ba8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f0264507020"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f026485ece8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f026472b6f8"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f026485e270"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f026472b020"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f026472a5b0"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f0264857ba8"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f026484bbc8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f026485c5a8"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f0264728268"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f026485c5a8"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f026471fbc8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f026485c5a8"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f026472ae78"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f02648499f8"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f0264729750"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f026484c6f8"/></to>
    </wire>
    <wire loc="77:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f0264843b38"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f0264722328"/></to>
    </wire>
    <wire loc="78:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f026483eb00"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f02646fb2b8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f02646fb2b8"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f02646f5b38"/></to>
    </wire>
    <wire loc="80:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f0264717c98"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f02646fba80"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f02646fba80"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f02646f2c50"/></to>
    </wire>
    <wire loc="332:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f02647eedd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f02648248e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f02647f1590"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f02647ea020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f0264727908"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f0264726100"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f02646f6cc8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f02646f2488"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f02646f2488"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f02646ab430"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f02646f2c50"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f02646abb90"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f02646f5b38"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f02646ecbe8"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f02646f0020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f026461ba88"/></to>
    </wire>
    <wire loc="33:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f026461ba88"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f026452f270"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f02646a72d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f02646f0020"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x7f02646aac18"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f026468a060"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x7f026468a060"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f026467c020"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x7f02646a9470"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f026468a8b8"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x7f026468a8b8"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f026467c8b8"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x7f02646a9c10"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f0264688158"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x7f0264688158"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f026467b158"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x7f0264681860"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x7f0264678020"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x7f02646876b0"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x7f026467ad98"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x7f0264681020"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x7f02646796b8"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f02646774c8"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f0264df6e68"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f02646761a8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f02650b53c8"/></to>
    </wire>
    <wire loc="34:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f0264513450"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f02646157f8"/></to>
    </wire>
    <wire loc="31:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f02646157f8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f0264562b90"/></to>
    </wire>
    <wire loc="32:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f0264538c58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f026460e570"/></to>
    </wire>
    <wire loc="89:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f026460e570"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f02645efbe0"/></to>
    </wire>
    <wire loc="90:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f02645ff1f0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f02645e8c90"/></to>
    </wire>
    <wire loc="91:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f02645f8b68"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f02645e6350"/></to>
    </wire>
    <wire loc="93:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f02645f49c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f02645e2c48"/></to>
    </wire>
    <wire loc="94:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f02645f49c0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f02645dd020"/></to>
    </wire>
    <wire loc="95:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f02645f49c0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f02645d9360"/></to>
    </wire>
    <wire loc="27:/opt/tinyos-2.1.2/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f0264552098"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f026460e570"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.2/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f02644d05e8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f02644f3368"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.2/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f02644f1020"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f02644d3090"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f02644d3090"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x7f0264dd9af0"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.1.2/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f02644f0190"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f02644d2378"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f02644d2378"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x7f0264ddb968"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.1.2/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f02644ef338"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f02644d1500"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f02644d1500"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x7f0264dec790"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="SyncLogC" loc="9:SyncLogC.nc">
      <documentation loc="1:SyncLogC.nc">
        <short>&#10; Test reading and writing to a log with lots of syncs.</short>
        <long>&#10; Test reading and writing to a log with lots of syncs. See README.txt for&#10; more details.&#10;&#10; @author Mayur Maheshwari (mayur.maheshwari@gmail.com)&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SyncLogAppC.Timer0" loc="44(SyncLogAppC.Timer0):/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:/opt/tinyos-2.1.2/tos/system/TimerMilliP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f0264f8eca0"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="McuSleepC" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="67:/opt/tinyos-2.1.2/tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/opt/tinyos-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/opt/tinyos-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MainC" loc="56:/opt/tinyos-2.1.2/tos/system/MainC.nc">
      <documentation loc="1:/opt/tinyos-2.1.2/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:/opt/tinyos-2.1.2/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:/opt/tinyos-2.1.2/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:/opt/tinyos-2.1.2/tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:/opt/tinyos-2.1.2/tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/opt/tinyos-2.1.2/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/opt/tinyos-2.1.2/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/opt/tinyos-2.1.2/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="SyncLogAppC.Timer1" loc="44(SyncLogAppC.Timer1):/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SyncLogAppC.LogStorageC" loc="24(SyncLogAppC.LogStorageC):/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
      <documentation loc="12:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
        <short>&#10; Implementation of the log storage abstraction from TEP103 for the&#10; Atmel AT45DB serial data flash.</short>
        <long>&#10; Implementation of the log storage abstraction from TEP103 for the&#10; Atmel AT45DB serial data flash.&#10;&#10; @param volid Volume to use for log storage&#10; @param circular TRUE if you want a circular log, FALSE for a linear log&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LogStorageC"/>
        <arguments>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="LogStorageP" loc="52:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageP.nc" safe="">
      <documentation loc="44:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageP.nc">
        <short>&#10; Private component of the AT45DB implementation of the log storage&#10; abstraction.</short>
        <long>&#10; Private component of the AT45DB implementation of the log storage&#10; abstraction.&#10;&#10; @author: David Gay &#60;dgay@acm.org>&#10; @author: Jonathan Hui &#60;jwhui@cs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="At45dbC" loc="22:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <documentation loc="12:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
        <short>&#10; HAL for Atmel's AT45DB family of serial dataflash chips.</short>
        <long>&#10; HAL for Atmel's AT45DB family of serial dataflash chips. Access to the HAL&#10; is controlled by a parameterised Resource interface - client ids are &#10; obtained with unique(UQ_AT45DB).&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="At45dbP" loc="53:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc" safe="">
      <documentation loc="47:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc">
        <short>&#10; Private componenent for the Atmel's AT45DB HAL.</short>
        <long>&#10; Private componenent for the Atmel's AT45DB HAL.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAt45dbC" loc="19:/opt/tinyos-2.1.2/tos/platforms/mica/chips/at45db/HplAt45dbC.nc">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/platforms/mica/chips/at45db/HplAt45dbC.nc">
        <short>&#10; AT45DB flash chip HPL for mica family.</short>
        <long>&#10; AT45DB flash chip HPL for mica family. Each family member must provide&#10; and HplAt45dbIOC component implementing the SPIByte and HplAt45dbByte&#10; interfaces required by HplAt45dbByteC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAt45dbC.HplAt45dbByteC" loc="25(HplAt45dbC.HplAt45dbByteC):/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByteC.nc">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByteC.nc">
        <short>&#10; Generic byte-at-a-time implementation of the AT45DB HPL.</short>
        <long>&#10; Generic byte-at-a-time implementation of the AT45DB HPL.&#10; &#10; Each platform must provide its own HPL implementation for its AT45DB&#10; flash chip. To simplify this task, this component can easily be used to&#10; build an AT45DB HPL by connecting it to a byte-at-a-time SPI interface,&#10; and an HplAt45dbByte interface.&#10;&#10; @param The number of bits needed to represent a sector size, e.g., 9&#10;   for the AT45DB041B.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAt45dbByteC"/>
        <arguments>
          <value cst="I:9">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAt45dbIOC" loc="52:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <documentation loc="45:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
        <short>&#10; Low-level access functions for the AT45DB flash on the mica2 and micaz.</short>
        <long>&#10; Low-level access functions for the AT45DB flash on the mica2 and micaz.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAt45dbIOP" loc="90:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <documentation loc="75:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
        <short>&#10; Low level hardware access to the onboard AT45DB flash chip.</short>
        <long>&#10; Low level hardware access to the onboard AT45DB flash chip.&#10; &#60;p>&#10; Note: This component includes optimised bit-banging SPI code with the&#10; pins hardwired.  Don't copy it to some other platform without&#10; understanding it (see txByte).&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:/opt/tinyos-2.1.2/tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="HplAt45dbIOC.NoArbiterC" loc="20(HplAt45dbIOC.NoArbiterC):/opt/tinyos-2.1.2/tos/system/NoArbiterC.nc">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/system/NoArbiterC.nc">
        <short>&#10; A do-nothing arbiter for non-shared resources which need to pretend to&#10; have arbitration.</short>
        <long>&#10; A do-nothing arbiter for non-shared resources which need to pretend to&#10; have arbitration. Just grants all requests, without any error&#10; checking. Does still call ResourceConfigure at the right time.&#10;&#10; @author David Gay&#10; @author Kevin Klues&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="NoArbiterC"/>
      </instance>
      <module/>
    </component>
    <component qname="At45dbC.Arbiter" loc="89(At45dbC.Arbiter):/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <documentation loc="69:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:at45db.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="At45dbC.Arbiter.Queue" loc="42(At45dbC.Arbiter.Queue):/opt/tinyos-2.1.2/tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="At45dbC.Arbiter.Arbiter" loc="52(At45dbC.Arbiter.Arbiter):/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="At45dbStorageManagerC" loc="17:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbStorageManagerC.nc" safe="">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbStorageManagerC.nc">
        <short>&#10; HAL component providing information on the flash volumes.</short>
        <long>&#10; HAL component providing information on the flash volumes.&#10;&#10; @author: David Gay &#60;dgay@acm.org>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:/opt/tinyos-2.1.2/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:/opt/tinyos-2.1.2/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:/opt/tinyos-2.1.2/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:/opt/tinyos-2.1.2/tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:/opt/tinyos-2.1.2/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="102:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="75:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="67:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="75:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="66:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TThree" ref="0x7f02650dbd70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TMicro" ref="0x7f026511b788"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TThree" ref="0x7f02650dbd70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x7f02650d9630"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:/opt/tinyos-2.1.2/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="45:/opt/tinyos-2.1.2/tos/system/LedsC.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:/opt/tinyos-2.1.2/tos/system/LedsP.nc" safe="">
      <documentation loc="35:/opt/tinyos-2.1.2/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:/opt/tinyos-2.1.2/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="TimerMilliC" loc="44:/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f0264f8eca0" loc="58:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f0264f8eca0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f0264f8b020" loc="58:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f0264f7f440" loc="58:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f0264f7f440"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f0264f7f730" loc="58:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/opt/tinyos-2.1.2/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/opt/tinyos-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f0264fa0c60" loc="46:/opt/tinyos-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f0264fa0c60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f0264e62cc8" loc="46:/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f0264e62cc8"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f0264e5f020" loc="46:/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:/opt/tinyos-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:/opt/tinyos-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f0264e149f0" loc="46:/opt/tinyos-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f0264e149f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f0264d9b8a8" loc="40:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f0264d9bbf0" loc="40:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f0264d98020" loc="40:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f0264d8b340" loc="41:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f0264d8b6a8" loc="42:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f0264d8ba10" loc="43:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f0264d8bd40" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f0264cfc508" loc="42:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f0264cfc870" loc="43:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f0264cfcbd8" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f0264cfb020" loc="45:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="LogStorageC" loc="24:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc" abstract="">
      <documentation loc="12:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
        <short>&#10; Implementation of the log storage abstraction from TEP103 for the&#10; Atmel AT45DB serial data flash.</short>
        <long>&#10; Implementation of the log storage abstraction from TEP103 for the&#10; Atmel AT45DB serial data flash.&#10;&#10; @param volid Volume to use for log storage&#10; @param circular TRUE if you want a circular log, FALSE for a linear log&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <constant name="volid" ref="0x7f0264c34c50" loc="24:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
          <component-ref qname="LogStorageC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="volume_id_t" ref="0x7f026508cc40"/></typename>
          </type-int>
        </constant>
        <constant name="circular" ref="0x7f0264c31020" loc="24:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
          <component-ref qname="LogStorageC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAt45dbByteC" loc="25:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByteC.nc" abstract="" safe="">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByteC.nc">
        <short>&#10; Generic byte-at-a-time implementation of the AT45DB HPL.</short>
        <long>&#10; Generic byte-at-a-time implementation of the AT45DB HPL.&#10; &#10; Each platform must provide its own HPL implementation for its AT45DB&#10; flash chip. To simplify this task, this component can easily be used to&#10; build an AT45DB HPL by connecting it to a byte-at-a-time SPI interface,&#10; and an HplAt45dbByte interface.&#10;&#10; @param The number of bits needed to represent a sector size, e.g., 9&#10;   for the AT45DB041B.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <constant name="sectorSizeLog2" ref="0x7f0264a1ce28" loc="25:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByteC.nc">
          <component-ref qname="HplAt45dbByteC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="NoArbiterC" loc="20:/opt/tinyos-2.1.2/tos/system/NoArbiterC.nc" abstract="">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/system/NoArbiterC.nc">
        <short>&#10; A do-nothing arbiter for non-shared resources which need to pretend to&#10; have arbitration.</short>
        <long>&#10; A do-nothing arbiter for non-shared resources which need to pretend to&#10; have arbitration. Just grants all requests, without any error&#10; checking. Does still call ResourceConfigure at the right time.&#10;&#10; @author David Gay&#10; @author Kevin Klues&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f0264975df0" loc="89:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:/opt/tinyos-2.1.2/tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f0264967170" loc="42:/opt/tinyos-2.1.2/tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f026494fa88" loc="52:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:/opt/tinyos-2.1.2/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:/opt/tinyos-2.1.2/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f026455d800" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f026455d800"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x7f026455db50" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f026454a110" loc="42:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f026454a110"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f026454a860" loc="43:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f026454a860"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f02645319c8" loc="55:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f02645319c8"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f026452e198" loc="56:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f026452e198"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f026452e560" loc="57:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f026452e560"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f026452ecd8" loc="58:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f026452ecd8"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f026452c0c8" loc="59:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f026452c858" loc="60:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f026452c858"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Timer0" ref="0x7f0265059c08" loc="17:SyncLogC.nc">
      <component-ref qname="SyncLogC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer0" scoped="" ref="0x7f0265059c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0265057e78"/>
        <function-ref name="fired" scoped="" ref="0x7f02650615a8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f02650572d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f0265061e48"/>
        <function-ref name="getdt" scoped="" ref="0x7f0265056748"/>
        <function-ref name="gett0" scoped="" ref="0x7f02650562f8"/>
        <function-ref name="isRunning" scoped="" ref="0x7f02650619f8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f026506a7e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f02650578a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f026506ac88"/>
        <function-ref name="stop" scoped="" ref="0x7f0265061158"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x7f0265086bc0" loc="14:SyncLogC.nc">
      <component-ref qname="SyncLogC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMControl" scoped="" ref="0x7f0265086bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f026508c020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f026508c1a8"/>
        <function-ref name="start" scoped="" ref="0x7f026508c330"/>
        <function-ref name="stop" scoped="" ref="0x7f026508c4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f026508a3e0" loc="13:SyncLogC.nc">
      <component-ref qname="SyncLogC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f026508a3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f026508a730"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f0264fe24c0" loc="19:SyncLogC.nc">
      <component-ref qname="SyncLogC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f0264fe24c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f0264fe2810"/>
        <function-ref name="getPayload" scoped="" ref="0x7f0264fe2998"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f0264fe2b20"/>
        <function-ref name="cancel" scoped="" ref="0x7f0264fe2ca8"/>
        <function-ref name="sendDone" scoped="" ref="0x7f0264fe2e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x7f0264fe4020" loc="30:SyncLogC.nc">
      <component-ref qname="SyncLogC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x7f0264fe4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f0264fe4370"/>
        <function-ref name="runTask" scoped="" ref="0x7f0264fe44f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer1" ref="0x7f0265056d20" loc="18:SyncLogC.nc">
      <component-ref qname="SyncLogC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer1" scoped="" ref="0x7f0265056d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0265051088"/>
        <function-ref name="fired" scoped="" ref="0x7f0265053688"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f0265052470"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f0265052020"/>
        <function-ref name="getdt" scoped="" ref="0x7f0265051928"/>
        <function-ref name="gett0" scoped="" ref="0x7f02650514d8"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0265053ad8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f02650548b8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f0265052a40"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f0265054d58"/>
        <function-ref name="stop" scoped="" ref="0x7f0265053238"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f0265097020" loc="12:SyncLogC.nc">
      <component-ref qname="SyncLogC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f0265097020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f0265097370"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f02650974f8"/>
        <function-ref name="led1On" scoped="" ref="0x7f0265097680"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f0265097808"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f0265097990"/>
        <function-ref name="get" scoped="" ref="0x7f0265097b18"/>
        <function-ref name="led1Off" scoped="" ref="0x7f0265097ca0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f0265096330"/>
        <function-ref name="set" scoped="" ref="0x7f0265097e28"/>
        <function-ref name="led0On" scoped="" ref="0x7f0265096020"/>
        <function-ref name="led2On" scoped="" ref="0x7f02650961a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LogRead" ref="0x7f02650627b0" loc="16:SyncLogC.nc">
      <component-ref qname="SyncLogC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LogRead" scoped="" ref="0x7f02650627b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LogRead"/>
      </instance>
      <interface-functions>
        <function-ref name="readDone" scoped="" ref="0x7f0265085330"/>
        <function-ref name="currentOffset" scoped="" ref="0x7f0265062c88"/>
        <function-ref name="read" scoped="" ref="0x7f0265062e10"/>
        <function-ref name="seekDone" scoped="" ref="0x7f0265085020"/>
        <function-ref name="getSize" scoped="" ref="0x7f02650851a8"/>
        <function-ref name="seek" scoped="" ref="0x7f0265062b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LogWrite" ref="0x7f026506bc38" loc="15:SyncLogC.nc">
      <component-ref qname="SyncLogC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LogWrite" scoped="" ref="0x7f026506bc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="LogWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="currentOffset" scoped="" ref="0x7f026508b020"/>
        <function-ref name="syncDone" scoped="" ref="0x7f026508b1a8"/>
        <function-ref name="erase" scoped="" ref="0x7f026508b330"/>
        <function-ref name="eraseDone" scoped="" ref="0x7f026508b4b8"/>
        <function-ref name="appendDone" scoped="" ref="0x7f026508b640"/>
        <function-ref name="append" scoped="" ref="0x7f026508b7c8"/>
        <function-ref name="sync" scoped="" ref="0x7f026508b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f0264fbe350" loc="45:/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc">
      <component-ref qname="SyncLogAppC.Timer0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f0264fbe350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264c3d6c8"/>
        <function-ref name="fired" scoped="" ref="0x7f0264c3fdb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f0264c3ead8"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f0264c3e688"/>
        <function-ref name="getdt" scoped="" ref="0x7f0264c3b020"/>
        <function-ref name="gett0" scoped="" ref="0x7f0264c3db18"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264c3e238"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f0264c3f020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f0264c3d0f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f0264c3f4c0"/>
        <function-ref name="stop" scoped="" ref="0x7f0264c3f960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f0264fb8e28" loc="49:/opt/tinyos-2.1.2/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f0264fb8e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264fb10c0"/>
        <function-ref name="fired" scoped="" ref="0x7f0264fb4798"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f0264fb34d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f0264fb3088"/>
        <function-ref name="getdt" scoped="" ref="0x7f0264fb1960"/>
        <function-ref name="gett0" scoped="" ref="0x7f0264fb1510"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264fb4be8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f0264fb59e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f0264fb3aa8"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f0264fb5e80"/>
        <function-ref name="stop" scoped="" ref="0x7f0264fb4348"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f0264fad1c8" loc="46:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f0264fad1c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264fa85f0"/>
        <function-ref name="fired" scoped="" ref="0x7f0264facaf0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f0264fa98c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f0264fa9470"/>
        <function-ref name="getdt" scoped="" ref="0x7f0264fa6020"/>
        <function-ref name="gett0" scoped="" ref="0x7f0264fa8a40"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264fa9020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f0264fadd10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f0264fa8020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f0264fac200"/>
        <function-ref name="stop" scoped="" ref="0x7f0264fac6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f0264fa3980" loc="47:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f0264fa3980"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f0264fa5560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f0264faa4a0" loc="45:/opt/tinyos-2.1.2/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f0264faa4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264faa7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x7f0264f90e40" loc="29:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x7f0264f90e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f0264f94be8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f0264f93548"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f0264f930c0"/>
        <function-ref name="overflow" scoped="" ref="0x7f0264f939d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f0264f9f020" loc="27:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f0264f9f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264f9f370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x7f0264f97838" loc="28:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x7f0264f97838"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264f95020"/>
        <function-ref name="fired" scoped="" ref="0x7f0264f9d020"/>
        <function-ref name="startAt" scoped="" ref="0x7f0264f9d930"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264f9d4a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f0264f954a8"/>
        <function-ref name="start" scoped="" ref="0x7f0264f9e5e0"/>
        <function-ref name="stop" scoped="" ref="0x7f0264f9eab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f0264e9a8f0" loc="61:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f0264e9a8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264e96020"/>
        <function-ref name="fired" scoped="" ref="0x7f0264e97020"/>
        <function-ref name="startAt" scoped="" ref="0x7f0264e97930"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264e974a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f0264e964a8"/>
        <function-ref name="start" scoped="" ref="0x7f0264e99698"/>
        <function-ref name="stop" scoped="" ref="0x7f0264e99b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f0264e9a148" loc="60:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f0264e9a148"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f02651a7388"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f02651a7388"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264e9a498"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f0264e96a90" loc="62:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f0264e96a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f0264e95828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f0264e94190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f0264e95cb0"/>
        <function-ref name="overflow" scoped="" ref="0x7f0264e94618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x7f02644aa0c0" loc="66:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f02644aa0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f02644aa410"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f02644aa598"/>
        <function-ref name="getControlA" scoped="" ref="0x7f02644aa720"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f02644aa8a8"/>
        <function-ref name="setControlB" scoped="" ref="0x7f02644aaa30"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f02644aabb8"/>
        <function-ref name="getControlB" scoped="" ref="0x7f02644aad40"/>
        <function-ref name="setControlA" scoped="" ref="0x7f02644a9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f02644b9e10" loc="61:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f02644b9e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f02644b5628"/>
        <function-ref name="fired" scoped="" ref="0x7f02644b6580"/>
        <function-ref name="startAt" scoped="" ref="0x7f02644b5020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f02644b6a08"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f02644b5ab0"/>
        <function-ref name="start" scoped="" ref="0x7f02644b7be8"/>
        <function-ref name="stop" scoped="" ref="0x7f02644b60f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f02644b9668" loc="60:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f02644b9668"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f02644b99b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f02644b4128" loc="62:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f02644b4128"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f02644b4e78"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f02644b07b8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f02644b0330"/>
        <function-ref name="overflow" scoped="" ref="0x7f02644b0c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x7f02644a5510" loc="68:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f02644a5510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f02644a5860"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f02644a59e8"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f02644a5b70"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f02644a5cf8"/>
        <function-ref name="countBusy" scoped="" ref="0x7f02644a5e80"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f02644a4030"/>
        <function-ref name="getAssr" scoped="" ref="0x7f02644a41b8"/>
        <function-ref name="setAssr" scoped="" ref="0x7f02644a4340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x7f02644a93b0" loc="67:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f02644a93b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f02644a6c20"/>
        <function-ref name="fired" scoped="" ref="0x7f02644a8980"/>
        <function-ref name="get" scoped="" ref="0x7f02644a8020"/>
        <function-ref name="reset" scoped="" ref="0x7f02644a8e08"/>
        <function-ref name="isOn" scoped="" ref="0x7f02644a50f8"/>
        <function-ref name="set" scoped="" ref="0x7f02644a84a8"/>
        <function-ref name="start" scoped="" ref="0x7f02644a6310"/>
        <function-ref name="stop" scoped="" ref="0x7f02644a6798"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f02644af228" loc="65:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f02644af228"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f02644ab310"/>
        <function-ref name="test" scoped="" ref="0x7f02644ad998"/>
        <function-ref name="get" scoped="" ref="0x7f02644afda8"/>
        <function-ref name="setScale" scoped="" ref="0x7f02644ab798"/>
        <function-ref name="getScale" scoped="" ref="0x7f02644abc70"/>
        <function-ref name="reset" scoped="" ref="0x7f02644aebd0"/>
        <function-ref name="overflow" scoped="" ref="0x7f02644ae748"/>
        <function-ref name="isOn" scoped="" ref="0x7f02644ade20"/>
        <function-ref name="set" scoped="" ref="0x7f02644ae270"/>
        <function-ref name="start" scoped="" ref="0x7f02644ad088"/>
        <function-ref name="stop" scoped="" ref="0x7f02644ad510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f0264f08a98" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f0264f08a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f0264f08de8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f0264f07020"/>
        <function-ref name="getControlA" scoped="" ref="0x7f0264f071a8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f0264f07330"/>
        <function-ref name="setControlB" scoped="" ref="0x7f0264f074b8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f0264f07640"/>
        <function-ref name="getControlB" scoped="" ref="0x7f0264f077c8"/>
        <function-ref name="setControlA" scoped="" ref="0x7f0264f07950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f0264f02228" loc="84:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f0264f02228"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f0264f02578"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f0264f02700"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f0264f02888"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f0264f02a10"/>
        <function-ref name="countBusy" scoped="" ref="0x7f0264f02b98"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f0264f02d20"/>
        <function-ref name="getAssr" scoped="" ref="0x7f0264f01020"/>
        <function-ref name="setAssr" scoped="" ref="0x7f0264f011a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f0264f07e18" loc="83:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f0264f07e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f0264f04798"/>
        <function-ref name="fired" scoped="" ref="0x7f0264f054f8"/>
        <function-ref name="get" scoped="" ref="0x7f0264f06a18"/>
        <function-ref name="reset" scoped="" ref="0x7f0264f05980"/>
        <function-ref name="isOn" scoped="" ref="0x7f0264f04c20"/>
        <function-ref name="set" scoped="" ref="0x7f0264f05020"/>
        <function-ref name="start" scoped="" ref="0x7f0264f05e08"/>
        <function-ref name="stop" scoped="" ref="0x7f0264f04310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f0264f0fa08" loc="81:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f0264f0fa08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f0264f0ab80"/>
        <function-ref name="test" scoped="" ref="0x7f0264f0a270"/>
        <function-ref name="get" scoped="" ref="0x7f0264f0c5b0"/>
        <function-ref name="setScale" scoped="" ref="0x7f0264f08088"/>
        <function-ref name="getScale" scoped="" ref="0x7f0264f08560"/>
        <function-ref name="reset" scoped="" ref="0x7f0264f0b4a8"/>
        <function-ref name="overflow" scoped="" ref="0x7f0264f0b020"/>
        <function-ref name="isOn" scoped="" ref="0x7f0264f0a6f8"/>
        <function-ref name="set" scoped="" ref="0x7f0264f0ca38"/>
        <function-ref name="start" scoped="" ref="0x7f0264f0b930"/>
        <function-ref name="stop" scoped="" ref="0x7f0264f0bdb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f0264ef95c0" loc="83:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f0264ef95c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f0264ef9910"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f0264ef9a98"/>
        <function-ref name="getControlA" scoped="" ref="0x7f0264ef9c20"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f0264ef9da8"/>
        <function-ref name="setControlB" scoped="" ref="0x7f0264ef8020"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f0264ef81a8"/>
        <function-ref name="getControlB" scoped="" ref="0x7f0264ef8330"/>
        <function-ref name="setControlA" scoped="" ref="0x7f0264ef84b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f0264ef4b78" loc="85:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f0264ef4b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f0264ef3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f0264ef33d0" loc="86:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f0264ef33d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f0264ef3720"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f0264ef38a8"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f0264ef3a30"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f0264ef3bb8"/>
        <function-ref name="countBusy" scoped="" ref="0x7f0264ef3d40"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f0264ef2020"/>
        <function-ref name="getAssr" scoped="" ref="0x7f0264ef21a8"/>
        <function-ref name="setAssr" scoped="" ref="0x7f0264ef2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f0264ef8980" loc="84:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f0264ef8980"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f0264ef4270"/>
        <function-ref name="fired" scoped="" ref="0x7f0264ef6020"/>
        <function-ref name="get" scoped="" ref="0x7f0264ef7560"/>
        <function-ref name="reset" scoped="" ref="0x7f0264ef64a8"/>
        <function-ref name="isOn" scoped="" ref="0x7f0264ef46f8"/>
        <function-ref name="set" scoped="" ref="0x7f0264ef79e8"/>
        <function-ref name="start" scoped="" ref="0x7f0264ef6930"/>
        <function-ref name="stop" scoped="" ref="0x7f0264ef6db8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f0264efe5d0" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f0264efe5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f0264efa6f8"/>
        <function-ref name="test" scoped="" ref="0x7f0264efcdb8"/>
        <function-ref name="get" scoped="" ref="0x7f0264efd190"/>
        <function-ref name="setScale" scoped="" ref="0x7f0264efab80"/>
        <function-ref name="getScale" scoped="" ref="0x7f0264ef9088"/>
        <function-ref name="reset" scoped="" ref="0x7f0264efc020"/>
        <function-ref name="overflow" scoped="" ref="0x7f0264efdaf0"/>
        <function-ref name="isOn" scoped="" ref="0x7f0264efa270"/>
        <function-ref name="set" scoped="" ref="0x7f0264efd618"/>
        <function-ref name="start" scoped="" ref="0x7f0264efc4a8"/>
        <function-ref name="stop" scoped="" ref="0x7f0264efc930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f02650b4988" loc="88:/opt/tinyos-2.1.2/tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f02650b4988"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f02650b4cd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f0265188e28" loc="84:/opt/tinyos-2.1.2/tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f0265188e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x7f02650b81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f02650b53c8" loc="85:/opt/tinyos-2.1.2/tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f02650b53c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f02650b5718"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f0264e64cf0" loc="74:/opt/tinyos-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x7f0264e64cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f0264e630a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f0264e63228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f0264e68c70" loc="49:/opt/tinyos-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f0264e68c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264e64410"/>
        <function-ref name="fired" scoped="" ref="0x7f0264e654a8"/>
        <function-ref name="startAt" scoped="" ref="0x7f0264e65db8"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264e65930"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f0264e64898"/>
        <function-ref name="start" scoped="" ref="0x7f0264e679f0"/>
        <function-ref name="stop" scoped="" ref="0x7f0264e65020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f0264e6dab0" loc="48:/opt/tinyos-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f0264e6dab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264e69d60"/>
        <function-ref name="fired" scoped="" ref="0x7f0264e6b470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f0264e691c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f0264e6bd10"/>
        <function-ref name="getdt" scoped="" ref="0x7f0264e68648"/>
        <function-ref name="gett0" scoped="" ref="0x7f0264e681f8"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264e6b8c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f0264e6c620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f0264e69790"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f0264e6cac0"/>
        <function-ref name="stop" scoped="" ref="0x7f0264e6b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f0264e16930" loc="71:/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x7f0264e16930"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f0264e16c80"/>
        <function-ref name="runTask" scoped="" ref="0x7f0264e16e08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f0264e1b858" loc="49:/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x7f0264e1b858"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264e17bc0"/>
        <function-ref name="fired" scoped="" ref="0x7f0264e181c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f0264e17020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f0264e18a60"/>
        <function-ref name="getdt" scoped="" ref="0x7f0264e164d8"/>
        <function-ref name="gett0" scoped="" ref="0x7f0264e16088"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264e18610"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f0264e1a3d8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f0264e175f0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f0264e1a878"/>
        <function-ref name="stop" scoped="" ref="0x7f0264e1ad18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f0264e215e0" loc="48:/opt/tinyos-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f0264e215e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264e1d988"/>
        <function-ref name="fired" scoped="" ref="0x7f0264e1e020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f0264e1ed70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f0264e1e900"/>
        <function-ref name="getdt" scoped="" ref="0x7f0264e1b2d8"/>
        <function-ref name="gett0" scoped="" ref="0x7f0264e1ddf8"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264e1e490"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f0264e20198"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f0264e1d398"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f0264e20658"/>
        <function-ref name="stop" scoped="" ref="0x7f0264e20b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f0264e11128" loc="48:/opt/tinyos-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f0264e11128"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f0264e11ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f0264e08330" loc="49:/opt/tinyos-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f0264e08330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f0264e070c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f0264e079d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f0264e07548"/>
        <function-ref name="overflow" scoped="" ref="0x7f0264e07e58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f0264e00788" loc="58:/opt/tinyos-2.1.2/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264e00788"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264e00ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f0264e000c0" loc="57:/opt/tinyos-2.1.2/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f0264e000c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f0264e00410"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f0264dfbb68" loc="52:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f0264dfbb68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264dfa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f0264dfc020" loc="46:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f0264dfc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264dfc370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f0264df6e68" loc="50:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f0264df6e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f0264dfb1e8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f0264dfb370"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f0264dfb4f8"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f0264dfb680"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f0264dfb808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f0264df36c0" loc="45:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x7f0264df36c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264df3a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f0264df3020" loc="44:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f0264df3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264df3370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x7f0264df3d88" loc="46:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x7f0264df3d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264df2170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f0264df5be8" loc="41:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f0264df5be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264ded020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f0264df5558" loc="40:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f0264df5558"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264df58a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f0264de74f8" loc="45:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f0264de74f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264de7848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x7f0264de1388" loc="44:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x7f0264de1388"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264de16d8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264de1860"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264de19e8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264de1b70"/>
        <function-ref name="get" scoped="" ref="0x7f0264de1cf8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264de1e80"/>
        <function-ref name="set" scoped="" ref="0x7f0264de7030"/>
        <function-ref name="clr" scoped="" ref="0x7f0264de71b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f0264de8020" loc="43:/opt/tinyos-2.1.2/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f0264de8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264de8370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x7f0264da4968" loc="98:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x7f0264da4968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264da30f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264da3278"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264da3400"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264da3588"/>
        <function-ref name="get" scoped="" ref="0x7f0264da3710"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264da3898"/>
        <function-ref name="set" scoped="" ref="0x7f0264da3a20"/>
        <function-ref name="clr" scoped="" ref="0x7f0264da3ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x7f0264dbe4d0" loc="72:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x7f0264dbe4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dbe820"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dbe9a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dbeb30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dbecb8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dbee40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dbd020"/>
        <function-ref name="set" scoped="" ref="0x7f0264dbd1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dbd330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x7f0264db34d0" loc="83:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x7f0264db34d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264db3820"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db39a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264db3b30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264db3cb8"/>
        <function-ref name="get" scoped="" ref="0x7f0264db3e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264db2020"/>
        <function-ref name="set" scoped="" ref="0x7f0264db21a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264db2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x7f0264daa1a0" loc="92:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x7f0264daa1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264daa4f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264daa678"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264daa800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264daa988"/>
        <function-ref name="get" scoped="" ref="0x7f0264daab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264daac98"/>
        <function-ref name="set" scoped="" ref="0x7f0264daae20"/>
        <function-ref name="clr" scoped="" ref="0x7f0264da9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x7f0264d9e658" loc="103:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x7f0264d9e658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d9e9a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d9eb30"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d9ecb8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d9ee40"/>
        <function-ref name="get" scoped="" ref="0x7f0264d9d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d9d1a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d9d330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d9d4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x7f0264dd41a0" loc="50:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x7f0264dd41a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dd44f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dd4678"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd4800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dd4988"/>
        <function-ref name="get" scoped="" ref="0x7f0264dd4b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dd4c98"/>
        <function-ref name="set" scoped="" ref="0x7f0264dd4e20"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dd3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x7f0264dade00" loc="90:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x7f0264dade00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dac1a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dac330"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dac4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dac640"/>
        <function-ref name="get" scoped="" ref="0x7f0264dac7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dac950"/>
        <function-ref name="set" scoped="" ref="0x7f0264dacad8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dacc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x7f0264dd24d0" loc="53:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x7f0264dd24d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dd2820"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dd29a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd2b30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dd2cb8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dd2e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dd1020"/>
        <function-ref name="set" scoped="" ref="0x7f0264dd11a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dd1330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x7f0264dc7658" loc="64:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x7f0264dc7658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dc79a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dc7b30"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dc7cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dc7e40"/>
        <function-ref name="get" scoped="" ref="0x7f0264dc6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dc61a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dc6330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dc64b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x7f0264dbb968" loc="75:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x7f0264dbb968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dbbcb8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dbbe40"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dba020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dba1a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dba330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dba4b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dba640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dba7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x7f0264db0968" loc="86:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x7f0264db0968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264db0cb8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db0e40"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264daf020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264daf1a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264daf330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264daf4b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264daf640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264daf7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x7f0264ddb968" loc="45:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x7f0264ddb968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264ddbcb8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264ddbe40"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dd91a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dd9330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dd94b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dd9640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dd97c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x7f0264dcf968" loc="56:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x7f0264dcf968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dcfcb8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dcfe40"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dce020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dce1a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dce330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dce4b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dce640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dce7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x7f0264dc4af0" loc="67:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x7f0264dc4af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dc4e40"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dc3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dc31a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dc3330"/>
        <function-ref name="get" scoped="" ref="0x7f0264dc34b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dc3640"/>
        <function-ref name="set" scoped="" ref="0x7f0264dc37c8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dc3950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x7f0264db8e00" loc="78:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x7f0264db8e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264db71a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db7330"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264db74b8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264db7640"/>
        <function-ref name="get" scoped="" ref="0x7f0264db77c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264db7950"/>
        <function-ref name="set" scoped="" ref="0x7f0264db7ad8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264db7c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x7f0264da7658" loc="95:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x7f0264da7658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264da79a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264da7b30"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264da7cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264da7e40"/>
        <function-ref name="get" scoped="" ref="0x7f0264da6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264da61a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264da6330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264da64b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x7f0264da0348" loc="101:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x7f0264da0348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264da0698"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264da0820"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264da09a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264da0b30"/>
        <function-ref name="get" scoped="" ref="0x7f0264da0cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264da0e40"/>
        <function-ref name="set" scoped="" ref="0x7f0264d9f020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d9f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x7f0264db51a0" loc="81:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x7f0264db51a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264db54f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db5678"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264db5800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264db5988"/>
        <function-ref name="get" scoped="" ref="0x7f0264db5b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264db5c98"/>
        <function-ref name="set" scoped="" ref="0x7f0264db5e20"/>
        <function-ref name="clr" scoped="" ref="0x7f0264db4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x7f0264dd7e00" loc="48:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x7f0264dd7e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dd61a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dd6330"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd64b8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dd6640"/>
        <function-ref name="get" scoped="" ref="0x7f0264dd67c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dd6950"/>
        <function-ref name="set" scoped="" ref="0x7f0264dd6ad8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dd6c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x7f0264dcb020" loc="59:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x7f0264dcb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dcb370"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dcb4f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dcb680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dcb808"/>
        <function-ref name="get" scoped="" ref="0x7f0264dcb990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dcbb18"/>
        <function-ref name="set" scoped="" ref="0x7f0264dcbca0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dcbe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x7f0264da2020" loc="99:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x7f0264da2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264da2370"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264da24f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264da2680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264da2808"/>
        <function-ref name="get" scoped="" ref="0x7f0264da2990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264da2b18"/>
        <function-ref name="set" scoped="" ref="0x7f0264da2ca0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264da2e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x7f0264dc9348" loc="62:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x7f0264dc9348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dc9698"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dc9820"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dc99a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dc9b30"/>
        <function-ref name="get" scoped="" ref="0x7f0264dc9cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dc9e40"/>
        <function-ref name="set" scoped="" ref="0x7f0264dc8020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dc81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x7f0264dbd658" loc="73:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x7f0264dbd658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dbd9a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dbdb30"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dbdcb8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dbde40"/>
        <function-ref name="get" scoped="" ref="0x7f0264dbc020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dbc1a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dbc330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dbc4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x7f0264db2658" loc="84:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x7f0264db2658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264db29a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db2b30"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264db2cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264db2e40"/>
        <function-ref name="get" scoped="" ref="0x7f0264db1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264db11a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264db1330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264db14b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x7f0264da9348" loc="93:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x7f0264da9348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264da9698"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264da9820"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264da99a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264da9b30"/>
        <function-ref name="get" scoped="" ref="0x7f0264da9cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264da9e40"/>
        <function-ref name="set" scoped="" ref="0x7f0264da8020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264da81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x7f0264dd3348" loc="51:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x7f0264dd3348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dd3698"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dd3820"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd39a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dd3b30"/>
        <function-ref name="get" scoped="" ref="0x7f0264dd3cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dd3e40"/>
        <function-ref name="set" scoped="" ref="0x7f0264dd2020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dd21a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x7f0264dd1658" loc="54:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x7f0264dd1658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dd19a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dd1b30"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd1cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dd1e40"/>
        <function-ref name="get" scoped="" ref="0x7f0264dd0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dd01a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dd0330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dd04b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x7f0264dc67e0" loc="65:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x7f0264dc67e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dc6b30"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dc6cb8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dc6e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dc5020"/>
        <function-ref name="get" scoped="" ref="0x7f0264dc51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dc5330"/>
        <function-ref name="set" scoped="" ref="0x7f0264dc54b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dc5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x7f0264dbaaf0" loc="76:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x7f0264dbaaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dbae40"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264db91a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264db9330"/>
        <function-ref name="get" scoped="" ref="0x7f0264db94b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264db9640"/>
        <function-ref name="set" scoped="" ref="0x7f0264db97c8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264db9950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x7f0264dafaf0" loc="87:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x7f0264dafaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dafe40"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dae020"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dae1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dae330"/>
        <function-ref name="get" scoped="" ref="0x7f0264dae4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dae640"/>
        <function-ref name="set" scoped="" ref="0x7f0264dae7c8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dae950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x7f0264dd9af0" loc="46:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x7f0264dd9af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dd9e40"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dd8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd81a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dd8330"/>
        <function-ref name="get" scoped="" ref="0x7f0264dd84b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dd8640"/>
        <function-ref name="set" scoped="" ref="0x7f0264dd87c8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dd8950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x7f0264dceaf0" loc="57:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x7f0264dceaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dcd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dcd1a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dcd330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dcd4b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dcd640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dcd7c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dcd950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dcdad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x7f0264dc3c78" loc="68:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x7f0264dc3c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dc2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dc21a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dc2330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dc24b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dc2640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dc27c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dc2950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dc2ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x7f0264da67e0" loc="96:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x7f0264da67e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264da6b30"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264da6cb8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264da6e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264da4020"/>
        <function-ref name="get" scoped="" ref="0x7f0264da41a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264da4330"/>
        <function-ref name="set" scoped="" ref="0x7f0264da44b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264da4640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x7f0264dbf020" loc="71:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x7f0264dbf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dbf570"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dbf6f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dbf880"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dbfa08"/>
        <function-ref name="get" scoped="" ref="0x7f0264dbfb90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dbfd18"/>
        <function-ref name="set" scoped="" ref="0x7f0264dbe020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dbe1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x7f0264db4348" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x7f0264db4348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264db4698"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db4820"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264db49a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264db4b30"/>
        <function-ref name="get" scoped="" ref="0x7f0264db4cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264db4e40"/>
        <function-ref name="set" scoped="" ref="0x7f0264db3020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264db31a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x7f0264dab020" loc="91:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x7f0264dab020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dab370"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dab4f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dab680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dab808"/>
        <function-ref name="get" scoped="" ref="0x7f0264dab990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dabb18"/>
        <function-ref name="set" scoped="" ref="0x7f0264dabca0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dabe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x7f0264d9f4d0" loc="102:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x7f0264d9f4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d9f820"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d9f9a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d9fb30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d9fcb8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d9fe40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d9e020"/>
        <function-ref name="set" scoped="" ref="0x7f0264d9e1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d9e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x7f0264dd5020" loc="49:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x7f0264dd5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dd5370"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dd54f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd5680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dd5808"/>
        <function-ref name="get" scoped="" ref="0x7f0264dd5990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dd5b18"/>
        <function-ref name="set" scoped="" ref="0x7f0264dd5ca0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dd5e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x7f0264dca1a0" loc="60:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x7f0264dca1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dca4f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dca678"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dca800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dca988"/>
        <function-ref name="get" scoped="" ref="0x7f0264dcab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dcac98"/>
        <function-ref name="set" scoped="" ref="0x7f0264dcae20"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dc9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x7f0264daec78" loc="89:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x7f0264daec78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dad020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dad1a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dad330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dad4b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dad640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dad7c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dad950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dadad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x7f0264dc84d0" loc="63:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x7f0264dc84d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dc8820"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dc89a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dc8b30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dc8cb8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dc8e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dc7020"/>
        <function-ref name="set" scoped="" ref="0x7f0264dc71a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dc7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x7f0264dbc7e0" loc="74:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x7f0264dbc7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dbcb30"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dbccb8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dbce40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dbb020"/>
        <function-ref name="get" scoped="" ref="0x7f0264dbb1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dbb330"/>
        <function-ref name="set" scoped="" ref="0x7f0264dbb4b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dbb640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x7f0264db17e0" loc="85:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x7f0264db17e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264db1b30"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db1cb8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264db1e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264db0020"/>
        <function-ref name="get" scoped="" ref="0x7f0264db01a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264db0330"/>
        <function-ref name="set" scoped="" ref="0x7f0264db04b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264db0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x7f0264da84d0" loc="94:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x7f0264da84d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264da8820"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264da89a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264da8b30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264da8cb8"/>
        <function-ref name="get" scoped="" ref="0x7f0264da8e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264da7020"/>
        <function-ref name="set" scoped="" ref="0x7f0264da71a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264da7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x7f0264dec790" loc="44:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x7f0264dec790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264decae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264decc68"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264decdf0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264ddb020"/>
        <function-ref name="get" scoped="" ref="0x7f0264ddb1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264ddb330"/>
        <function-ref name="set" scoped="" ref="0x7f0264ddb4b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264ddb640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x7f0264dd07e0" loc="55:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x7f0264dd07e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dd0b30"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dd0cb8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd0e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dcf020"/>
        <function-ref name="get" scoped="" ref="0x7f0264dcf1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dcf330"/>
        <function-ref name="set" scoped="" ref="0x7f0264dcf4b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dcf640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x7f0264dc5968" loc="66:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x7f0264dc5968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dc5cb8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dc5e40"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dc4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dc41a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dc4330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dc44b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dc4640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dc47c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x7f0264db9c78" loc="77:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x7f0264db9c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264db8020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db81a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264db8330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264db84b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264db8640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264db87c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264db8950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264db8ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x7f0264da11a0" loc="100:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x7f0264da11a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264da14f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264da1678"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264da1800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264da1988"/>
        <function-ref name="get" scoped="" ref="0x7f0264da1b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264da1c98"/>
        <function-ref name="set" scoped="" ref="0x7f0264da1e20"/>
        <function-ref name="clr" scoped="" ref="0x7f0264da0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x7f0264db6020" loc="80:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x7f0264db6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264db6370"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264db64f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264db6680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264db6808"/>
        <function-ref name="get" scoped="" ref="0x7f0264db6990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264db6b18"/>
        <function-ref name="set" scoped="" ref="0x7f0264db6ca0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264db6e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x7f0264dc2e00" loc="69:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x7f0264dc2e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dc11a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dc1330"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dc14b8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dc1640"/>
        <function-ref name="get" scoped="" ref="0x7f0264dc17c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dc1950"/>
        <function-ref name="set" scoped="" ref="0x7f0264dc1ad8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dc1c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x7f0264dd8c78" loc="47:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x7f0264dd8c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dd7020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dd71a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dd7330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dd74b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264dd7640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dd77c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264dd7950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dd7ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x7f0264dcde00" loc="58:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x7f0264dcde00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264dcc1a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264dcc330"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264dcc4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264dcc640"/>
        <function-ref name="get" scoped="" ref="0x7f0264dcc7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264dcc950"/>
        <function-ref name="set" scoped="" ref="0x7f0264dccad8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264dccc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f0264d54120" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f0264d54120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d54470"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d545f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d54780"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d54908"/>
        <function-ref name="get" scoped="" ref="0x7f0264d54a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d54c18"/>
        <function-ref name="set" scoped="" ref="0x7f0264d54da0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d53020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f0264d515b8" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f0264d515b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d51908"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d51a90"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d51c18"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d51da0"/>
        <function-ref name="get" scoped="" ref="0x7f0264d50020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d501a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d50330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d504b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f0264d57dc0" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f0264d57dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d56170"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d562f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d56480"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d56608"/>
        <function-ref name="get" scoped="" ref="0x7f0264d56790"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d56918"/>
        <function-ref name="set" scoped="" ref="0x7f0264d56aa0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d56c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f0264d532a8" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f0264d532a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d535f8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d53780"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d53908"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d53a90"/>
        <function-ref name="get" scoped="" ref="0x7f0264d53c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d53da0"/>
        <function-ref name="set" scoped="" ref="0x7f0264d52020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d521a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f0264d50740" loc="50:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f0264d50740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d50a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d50c18"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d50da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d4f020"/>
        <function-ref name="get" scoped="" ref="0x7f0264d4f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d4f330"/>
        <function-ref name="set" scoped="" ref="0x7f0264d4f4b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d4f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f0264d55020" loc="45:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f0264d55020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d55370"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d554f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d55680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d55808"/>
        <function-ref name="get" scoped="" ref="0x7f0264d55990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d55b18"/>
        <function-ref name="set" scoped="" ref="0x7f0264d55ca0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d55e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f0264d52430" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f0264d52430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d52780"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d52908"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d52a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d52c18"/>
        <function-ref name="get" scoped="" ref="0x7f0264d52da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d51020"/>
        <function-ref name="set" scoped="" ref="0x7f0264d511a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d51330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f0264d4f8c8" loc="51:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f0264d4f8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d4fc18"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d4fda0"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d4e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d4e1a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d4e330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d4e4b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d4e640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d4e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026441c3e0" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026441c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026441c730"/>
        <function-ref name="isInput" scoped="" ref="0x7f026441c8b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f026441ca40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026441cbc8"/>
        <function-ref name="get" scoped="" ref="0x7f026441cd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026441b020"/>
        <function-ref name="set" scoped="" ref="0x7f026441b1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026441b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264419480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264419480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644197d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264419958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264419ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264419c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264419df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264418020"/>
        <function-ref name="set" scoped="" ref="0x7f02644181a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264418330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264416480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264416480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644167d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264416958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264416ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264416c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264416df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264415020"/>
        <function-ref name="set" scoped="" ref="0x7f02644151a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264415330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264413480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264413480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644137d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264413958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264413ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264413c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264413df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264412020"/>
        <function-ref name="set" scoped="" ref="0x7f02644121a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264412330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264410480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264410480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644107d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264410958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264410ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264410c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264410df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026440e020"/>
        <function-ref name="set" scoped="" ref="0x7f026440e1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026440e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026440c480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026440c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026440c7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f026440c958"/>
        <function-ref name="toggle" scoped="" ref="0x7f026440cae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026440cc68"/>
        <function-ref name="get" scoped="" ref="0x7f026440cdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026440b020"/>
        <function-ref name="set" scoped="" ref="0x7f026440b1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026440b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264409480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264409480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644097d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264409958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264409ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264409c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264409df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264408020"/>
        <function-ref name="set" scoped="" ref="0x7f02644081a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264408330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264406480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264406480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644067d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264406958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264406ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264406c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264406df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264405020"/>
        <function-ref name="set" scoped="" ref="0x7f02644051a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264405330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f0264d46bd8" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f0264d46bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d45020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d451a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d45330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d454b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d45640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d457c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d45950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d45ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f0264d42020" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f0264d42020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d42370"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d424f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d42680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d42808"/>
        <function-ref name="get" scoped="" ref="0x7f0264d42990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d42b18"/>
        <function-ref name="set" scoped="" ref="0x7f0264d42ca0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d42e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f0264d48930" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f0264d48930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d48c80"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d48e08"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d47020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d471a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d47330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d474b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d47640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d477c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f0264d45d60" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f0264d45d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d440d8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d44260"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d443e8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d44570"/>
        <function-ref name="get" scoped="" ref="0x7f0264d446f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d44880"/>
        <function-ref name="set" scoped="" ref="0x7f0264d44a08"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d44b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f0264d41120" loc="50:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f0264d41120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d41470"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d415f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d41780"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d41908"/>
        <function-ref name="get" scoped="" ref="0x7f0264d41a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d41c18"/>
        <function-ref name="set" scoped="" ref="0x7f0264d41da0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d40020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f0264d47a50" loc="45:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f0264d47a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d47da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d46020"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d461a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d46330"/>
        <function-ref name="get" scoped="" ref="0x7f0264d464b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d46640"/>
        <function-ref name="set" scoped="" ref="0x7f0264d467c8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d46950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f0264d44e18" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f0264d44e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d431a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d43330"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d434b8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d43640"/>
        <function-ref name="get" scoped="" ref="0x7f0264d437c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d43950"/>
        <function-ref name="set" scoped="" ref="0x7f0264d43ad8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d43c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f0264d402a8" loc="51:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f0264d402a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d405f8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d40780"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d40908"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d40a90"/>
        <function-ref name="get" scoped="" ref="0x7f0264d40c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d40da0"/>
        <function-ref name="set" scoped="" ref="0x7f0264d3f020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d3f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02643b33e0" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02643b33e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643b3730"/>
        <function-ref name="isInput" scoped="" ref="0x7f02643b38b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f02643b3a40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02643b3bc8"/>
        <function-ref name="get" scoped="" ref="0x7f02643b3d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02643b2020"/>
        <function-ref name="set" scoped="" ref="0x7f02643b21a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02643b2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02643b0480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02643b0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643b07d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02643b0958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02643b0ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02643b0c68"/>
        <function-ref name="get" scoped="" ref="0x7f02643b0df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02643af020"/>
        <function-ref name="set" scoped="" ref="0x7f02643af1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02643af330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02643ad480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02643ad480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643ad7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02643ad958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02643adae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02643adc68"/>
        <function-ref name="get" scoped="" ref="0x7f02643addf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02643ac020"/>
        <function-ref name="set" scoped="" ref="0x7f02643ac1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02643ac330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02643aa480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02643aa480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643aa7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02643aa958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02643aaae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02643aac68"/>
        <function-ref name="get" scoped="" ref="0x7f02643aadf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02643a9020"/>
        <function-ref name="set" scoped="" ref="0x7f02643a91a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02643a9330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02643a7480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02643a7480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643a77d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02643a7958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02643a7ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02643a7c68"/>
        <function-ref name="get" scoped="" ref="0x7f02643a7df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02643a6020"/>
        <function-ref name="set" scoped="" ref="0x7f02643a61a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02643a6330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02643a4480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02643a4480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643a47d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02643a4958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02643a4ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02643a4c68"/>
        <function-ref name="get" scoped="" ref="0x7f02643a4df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02643a2020"/>
        <function-ref name="set" scoped="" ref="0x7f02643a21a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02643a2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02643a0480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02643a0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643a07d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02643a0958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02643a0ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02643a0c68"/>
        <function-ref name="get" scoped="" ref="0x7f02643a0df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026439f020"/>
        <function-ref name="set" scoped="" ref="0x7f026439f1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026439f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026439d480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026439d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026439d7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f026439d958"/>
        <function-ref name="toggle" scoped="" ref="0x7f026439dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026439dc68"/>
        <function-ref name="get" scoped="" ref="0x7f026439ddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026439c020"/>
        <function-ref name="set" scoped="" ref="0x7f026439c1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026439c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f0264d37740" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f0264d37740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d37a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d37c18"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d37da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d36020"/>
        <function-ref name="get" scoped="" ref="0x7f0264d361a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d36330"/>
        <function-ref name="set" scoped="" ref="0x7f0264d364b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d36640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f0264d34bd8" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f0264d34bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d32020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d321a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d32330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d324b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d32640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d327c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d32950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d32ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f0264d39500" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f0264d39500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d39850"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d399d8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d39b60"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d39ce8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d39e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d38020"/>
        <function-ref name="set" scoped="" ref="0x7f0264d381a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d38330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f0264d368c8" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f0264d368c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d36c18"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d36da0"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d35020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d351a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d35330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d354b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d35640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d357c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f0264d32d60" loc="50:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f0264d32d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d310d8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d31260"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d313e8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d31570"/>
        <function-ref name="get" scoped="" ref="0x7f0264d316f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d31880"/>
        <function-ref name="set" scoped="" ref="0x7f0264d31a08"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d31b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f0264d385b8" loc="45:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f0264d385b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d38908"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d38a90"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d38c18"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d38da0"/>
        <function-ref name="get" scoped="" ref="0x7f0264d37020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d371a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d37330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d374b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f0264d35a50" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f0264d35a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d35da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d34020"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d341a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d34330"/>
        <function-ref name="get" scoped="" ref="0x7f0264d344b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d34640"/>
        <function-ref name="set" scoped="" ref="0x7f0264d347c8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d34950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f0264d31e18" loc="51:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f0264d31e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d301a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d30330"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d304b8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d30640"/>
        <function-ref name="get" scoped="" ref="0x7f0264d307c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d30950"/>
        <function-ref name="set" scoped="" ref="0x7f0264d30ad8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d30c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026434c3e0" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026434c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026434c730"/>
        <function-ref name="isInput" scoped="" ref="0x7f026434c8b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f026434ca40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026434cbc8"/>
        <function-ref name="get" scoped="" ref="0x7f026434cd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026434b020"/>
        <function-ref name="set" scoped="" ref="0x7f026434b1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026434b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264349480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264349480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643497d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264349958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264349ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264349c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264349df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264348020"/>
        <function-ref name="set" scoped="" ref="0x7f02643481a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264348330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264346480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264346480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643467d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264346958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264346ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264346c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264346df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264345020"/>
        <function-ref name="set" scoped="" ref="0x7f02643451a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264345330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264343480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264343480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643437d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264343958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264343ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264343c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264343df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264342020"/>
        <function-ref name="set" scoped="" ref="0x7f02643421a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264342330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264340480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264340480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643407d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264340958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264340ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264340c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264340df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026433f020"/>
        <function-ref name="set" scoped="" ref="0x7f026433f1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026433f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026433d480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026433d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026433d7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f026433d958"/>
        <function-ref name="toggle" scoped="" ref="0x7f026433dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026433dc68"/>
        <function-ref name="get" scoped="" ref="0x7f026433ddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026433b020"/>
        <function-ref name="set" scoped="" ref="0x7f026433b1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026433b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264339480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264339480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643397d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264339958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264339ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264339c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264339df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264338020"/>
        <function-ref name="set" scoped="" ref="0x7f02643381a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264338330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264336480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264336480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02643367d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264336958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264336ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264336c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264336df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264335020"/>
        <function-ref name="set" scoped="" ref="0x7f02643351a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264335330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f0264d28120" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f0264d28120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d28470"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d285f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d28780"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d28908"/>
        <function-ref name="get" scoped="" ref="0x7f0264d28a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d28c18"/>
        <function-ref name="set" scoped="" ref="0x7f0264d28da0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d26020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f0264d245b8" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f0264d245b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d24908"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d24a90"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d24c18"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d24da0"/>
        <function-ref name="get" scoped="" ref="0x7f0264d23020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d231a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d23330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d234b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f0264d2be40" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f0264d2be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d2a1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d2a348"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d2a4d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d2a658"/>
        <function-ref name="get" scoped="" ref="0x7f0264d2a7e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d2a968"/>
        <function-ref name="set" scoped="" ref="0x7f0264d2aaf0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d2ac78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f0264d262a8" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f0264d262a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d265f8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d26780"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d26908"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d26a90"/>
        <function-ref name="get" scoped="" ref="0x7f0264d26c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d26da0"/>
        <function-ref name="set" scoped="" ref="0x7f0264d25020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d251a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f0264d23740" loc="50:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f0264d23740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d23a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d23c18"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d23da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d22020"/>
        <function-ref name="get" scoped="" ref="0x7f0264d221a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d22330"/>
        <function-ref name="set" scoped="" ref="0x7f0264d224b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d22640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f0264d29020" loc="45:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f0264d29020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d29370"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d294f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d29680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d29808"/>
        <function-ref name="get" scoped="" ref="0x7f0264d29990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d29b18"/>
        <function-ref name="set" scoped="" ref="0x7f0264d29ca0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d29e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f0264d25430" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f0264d25430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d25780"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d25908"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d25a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d25c18"/>
        <function-ref name="get" scoped="" ref="0x7f0264d25da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d24020"/>
        <function-ref name="set" scoped="" ref="0x7f0264d241a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d24330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f0264d228c8" loc="51:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f0264d228c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d22c18"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d22da0"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d21020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d211a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d21330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d214b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d21640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d217c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02642e53e0" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02642e53e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642e5730"/>
        <function-ref name="isInput" scoped="" ref="0x7f02642e58b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f02642e5a40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02642e5bc8"/>
        <function-ref name="get" scoped="" ref="0x7f02642e5d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02642e4020"/>
        <function-ref name="set" scoped="" ref="0x7f02642e41a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02642e4330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02642e2480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02642e2480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642e27d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02642e2958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02642e2ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02642e2c68"/>
        <function-ref name="get" scoped="" ref="0x7f02642e2df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02642e1020"/>
        <function-ref name="set" scoped="" ref="0x7f02642e11a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02642e1330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02642df480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02642df480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642df7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02642df958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02642dfae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02642dfc68"/>
        <function-ref name="get" scoped="" ref="0x7f02642dfdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02642de020"/>
        <function-ref name="set" scoped="" ref="0x7f02642de1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02642de330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02642dc480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02642dc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642dc7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02642dc958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02642dcae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02642dcc68"/>
        <function-ref name="get" scoped="" ref="0x7f02642dcdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02642db020"/>
        <function-ref name="set" scoped="" ref="0x7f02642db1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02642db330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02642d9480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02642d9480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642d97d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02642d9958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02642d9ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02642d9c68"/>
        <function-ref name="get" scoped="" ref="0x7f02642d9df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02642d8020"/>
        <function-ref name="set" scoped="" ref="0x7f02642d81a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02642d8330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02642d6480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02642d6480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642d67d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02642d6958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02642d6ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02642d6c68"/>
        <function-ref name="get" scoped="" ref="0x7f02642d6df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02642d5020"/>
        <function-ref name="set" scoped="" ref="0x7f02642d51a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02642d5330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02642d3480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02642d3480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642d37d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02642d3958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02642d3ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02642d3c68"/>
        <function-ref name="get" scoped="" ref="0x7f02642d3df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02642d1020"/>
        <function-ref name="set" scoped="" ref="0x7f02642d11a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02642d1330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02642cf480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02642cf480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642cf7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02642cf958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02642cfae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02642cfc68"/>
        <function-ref name="get" scoped="" ref="0x7f02642cfdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02642ce020"/>
        <function-ref name="set" scoped="" ref="0x7f02642ce1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02642ce330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f0264d19bd8" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f0264d19bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d18020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d181a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d18330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d184b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d18640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d187c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d18950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d18ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f0264d15020" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f0264d15020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d15370"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d154f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d15680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d15808"/>
        <function-ref name="get" scoped="" ref="0x7f0264d15990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d15b18"/>
        <function-ref name="set" scoped="" ref="0x7f0264d15ca0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d15e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f0264d1b930" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f0264d1b930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d1bc80"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d1be08"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d1a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d1a1a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d1a330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d1a4b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d1a640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d1a7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f0264d18d60" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f0264d18d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d170d8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d17260"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d173e8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d17570"/>
        <function-ref name="get" scoped="" ref="0x7f0264d176f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d17880"/>
        <function-ref name="set" scoped="" ref="0x7f0264d17a08"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d17b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f0264d14120" loc="50:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f0264d14120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d14470"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d145f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d14780"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d14908"/>
        <function-ref name="get" scoped="" ref="0x7f0264d14a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d14c18"/>
        <function-ref name="set" scoped="" ref="0x7f0264d14da0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d13020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f0264d1aa50" loc="45:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f0264d1aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d1ada0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d19020"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d191a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d19330"/>
        <function-ref name="get" scoped="" ref="0x7f0264d194b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d19640"/>
        <function-ref name="set" scoped="" ref="0x7f0264d197c8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d19950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f0264d17e18" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f0264d17e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d161a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d16330"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d164b8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d16640"/>
        <function-ref name="get" scoped="" ref="0x7f0264d167c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d16950"/>
        <function-ref name="set" scoped="" ref="0x7f0264d16ad8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d16c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f0264d132a8" loc="51:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f0264d132a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d135f8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d13780"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d13908"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d13a90"/>
        <function-ref name="get" scoped="" ref="0x7f0264d13c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d13da0"/>
        <function-ref name="set" scoped="" ref="0x7f0264d12020"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d121a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026427e3e0" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026427e3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026427e730"/>
        <function-ref name="isInput" scoped="" ref="0x7f026427e8b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f026427ea40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026427ebc8"/>
        <function-ref name="get" scoped="" ref="0x7f026427ed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026427d020"/>
        <function-ref name="set" scoped="" ref="0x7f026427d1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026427d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026427b480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026427b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026427b7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f026427b958"/>
        <function-ref name="toggle" scoped="" ref="0x7f026427bae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026427bc68"/>
        <function-ref name="get" scoped="" ref="0x7f026427bdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026427a020"/>
        <function-ref name="set" scoped="" ref="0x7f026427a1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026427a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264278480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264278480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642787d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264278958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264278ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264278c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264278df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264277020"/>
        <function-ref name="set" scoped="" ref="0x7f02642771a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264277330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264275480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264275480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642757d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264275958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264275ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264275c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264275df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264274020"/>
        <function-ref name="set" scoped="" ref="0x7f02642741a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264274330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264272480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264272480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642727d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264272958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264272ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264272c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264272df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264271020"/>
        <function-ref name="set" scoped="" ref="0x7f02642711a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264271330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026426f480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026426f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026426f7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f026426f958"/>
        <function-ref name="toggle" scoped="" ref="0x7f026426fae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026426fc68"/>
        <function-ref name="get" scoped="" ref="0x7f026426fdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026426e020"/>
        <function-ref name="set" scoped="" ref="0x7f026426e1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026426e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026426c480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026426c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026426c7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f026426c958"/>
        <function-ref name="toggle" scoped="" ref="0x7f026426cae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026426cc68"/>
        <function-ref name="get" scoped="" ref="0x7f026426cdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026426a020"/>
        <function-ref name="set" scoped="" ref="0x7f026426a1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026426a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264268480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264268480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642687d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264268958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264268ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264268c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264268df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264267020"/>
        <function-ref name="set" scoped="" ref="0x7f02642671a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264267330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f0264d0a740" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f0264d0a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d0aa90"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d0ac18"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d0ada0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d09020"/>
        <function-ref name="get" scoped="" ref="0x7f0264d091a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d09330"/>
        <function-ref name="set" scoped="" ref="0x7f0264d094b8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d09640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f0264d07bd8" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f0264d07bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d06020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d061a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d06330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d064b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d06640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d067c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d06950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d06ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f0264d0c500" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f0264d0c500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d0c850"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d0c9d8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d0cb60"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d0cce8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d0ce70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d0b020"/>
        <function-ref name="set" scoped="" ref="0x7f0264d0b1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d0b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f0264d098c8" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f0264d098c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d09c18"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d09da0"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d08020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d081a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264d08330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d084b8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d08640"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d087c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f0264d06d60" loc="50:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f0264d06d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d050d8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d05260"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d053e8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d05570"/>
        <function-ref name="get" scoped="" ref="0x7f0264d056f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d05880"/>
        <function-ref name="set" scoped="" ref="0x7f0264d05a08"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d05b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f0264d0b5b8" loc="45:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f0264d0b5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d0b908"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d0ba90"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d0bc18"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d0bda0"/>
        <function-ref name="get" scoped="" ref="0x7f0264d0a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d0a1a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264d0a330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d0a4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f0264d08a50" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f0264d08a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d08da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d07020"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d071a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d07330"/>
        <function-ref name="get" scoped="" ref="0x7f0264d074b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d07640"/>
        <function-ref name="set" scoped="" ref="0x7f0264d077c8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d07950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f0264d05e18" loc="51:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f0264d05e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264d031a8"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264d03330"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264d034b8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264d03640"/>
        <function-ref name="get" scoped="" ref="0x7f0264d037c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264d03950"/>
        <function-ref name="set" scoped="" ref="0x7f0264d03ad8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264d03c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026420e3e0" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026420e3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026420e730"/>
        <function-ref name="isInput" scoped="" ref="0x7f026420e8b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f026420ea40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026420ebc8"/>
        <function-ref name="get" scoped="" ref="0x7f026420ed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026420d020"/>
        <function-ref name="set" scoped="" ref="0x7f026420d1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026420d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f026420b480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f026420b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f026420b7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f026420b958"/>
        <function-ref name="toggle" scoped="" ref="0x7f026420bae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f026420bc68"/>
        <function-ref name="get" scoped="" ref="0x7f026420bdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f026420a020"/>
        <function-ref name="set" scoped="" ref="0x7f026420a1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f026420a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264208480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264208480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642087d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264208958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264208ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264208c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264208df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264207020"/>
        <function-ref name="set" scoped="" ref="0x7f02642071a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264207330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264205480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264205480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642057d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264205958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264205ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264205c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264205df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264204020"/>
        <function-ref name="set" scoped="" ref="0x7f02642041a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264204330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264202480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264202480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02642027d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264202958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264202ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264202c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264202df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264201020"/>
        <function-ref name="set" scoped="" ref="0x7f02642011a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264201330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02641ff480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02641ff480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02641ff7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02641ff958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02641ffae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02641ffc68"/>
        <function-ref name="get" scoped="" ref="0x7f02641ffdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02641fe020"/>
        <function-ref name="set" scoped="" ref="0x7f02641fe1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02641fe330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02641fc480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02641fc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02641fc7d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02641fc958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02641fcae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02641fcc68"/>
        <function-ref name="get" scoped="" ref="0x7f02641fcdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02641fb020"/>
        <function-ref name="set" scoped="" ref="0x7f02641fb1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02641fb330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f02641f9480" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f02641f9480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02641f97d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02641f9958"/>
        <function-ref name="toggle" scoped="" ref="0x7f02641f9ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02641f9c68"/>
        <function-ref name="get" scoped="" ref="0x7f02641f9df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02641f7020"/>
        <function-ref name="set" scoped="" ref="0x7f02641f71a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02641f7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cfd3e0" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cfd3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cfd730"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cfd8b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cfda40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cfdbc8"/>
        <function-ref name="get" scoped="" ref="0x7f0264cfdd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264ce6020"/>
        <function-ref name="set" scoped="" ref="0x7f0264ce61a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264ce6330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264ce3c38" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264ce3c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264ce2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264ce21a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264ce2330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264ce24b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264ce2640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264ce27c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264ce2950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264ce2ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cdd3e0" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cdd3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cdd730"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cdd8b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cdda40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cddbc8"/>
        <function-ref name="get" scoped="" ref="0x7f0264cddd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264cdc020"/>
        <function-ref name="set" scoped="" ref="0x7f0264cdc1a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264cdc330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cd8c38" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cd8c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cd7020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cd71a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cd7330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cd74b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264cd7640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264cd77c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264cd7950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264cd7ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cd33e0" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cd33e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cd3730"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cd38b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cd3a40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cd3bc8"/>
        <function-ref name="get" scoped="" ref="0x7f0264cd3d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264cd2020"/>
        <function-ref name="set" scoped="" ref="0x7f0264cd21a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264cd2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264ccec38" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264ccec38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264ccd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264ccd1a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264ccd330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264ccd4b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264ccd640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264ccd7c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264ccd950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264ccdad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cc8480" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cc8480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cc87d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cc8958"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cc8ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cc8c68"/>
        <function-ref name="get" scoped="" ref="0x7f0264cc8df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264cc7020"/>
        <function-ref name="set" scoped="" ref="0x7f0264cc71a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264cc7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cc4c38" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cc4c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cc3020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cc31a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cc3330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cc34b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264cc3640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264cc37c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264cc3950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264cc3ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cbe520" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cbe520"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cbe870"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cbe9f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cbeb80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cbed08"/>
        <function-ref name="get" scoped="" ref="0x7f0264cbd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264cbd1a8"/>
        <function-ref name="set" scoped="" ref="0x7f0264cbd330"/>
        <function-ref name="clr" scoped="" ref="0x7f0264cbd4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cb9cd8" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cb9cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cb80a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cb8228"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cb83b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cb8538"/>
        <function-ref name="get" scoped="" ref="0x7f0264cb86c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264cb8848"/>
        <function-ref name="set" scoped="" ref="0x7f0264cb89d0"/>
        <function-ref name="clr" scoped="" ref="0x7f0264cb8b58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cb43e0" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cb43e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cb4730"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cb48b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cb4a40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cb4bc8"/>
        <function-ref name="get" scoped="" ref="0x7f0264cb4d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264cb3020"/>
        <function-ref name="set" scoped="" ref="0x7f0264cb31a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264cb3330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264cafc38" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264cafc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264cae020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264cae1a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264cae330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264cae4b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264cae640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264cae7c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264cae950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264caead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264ca93e0" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264ca93e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264ca9730"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264ca98b8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264ca9a40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264ca9bc8"/>
        <function-ref name="get" scoped="" ref="0x7f0264ca9d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264ca8020"/>
        <function-ref name="set" scoped="" ref="0x7f0264ca81a8"/>
        <function-ref name="clr" scoped="" ref="0x7f0264ca8330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f0264ca5c38" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f0264ca5c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f0264ca4020"/>
        <function-ref name="isInput" scoped="" ref="0x7f0264ca41a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f0264ca4330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f0264ca44b8"/>
        <function-ref name="get" scoped="" ref="0x7f0264ca4640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f0264ca47c8"/>
        <function-ref name="set" scoped="" ref="0x7f0264ca4950"/>
        <function-ref name="clr" scoped="" ref="0x7f0264ca4ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f0264c6c4b0" loc="61:/opt/tinyos-2.1.2/tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f0264c6c4b0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f02651a76f0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f02651a76f0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264c6c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f0264c6cae0" loc="62:/opt/tinyos-2.1.2/tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f0264c6cae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f0264c6ce30"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f0264c6b020"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f0264c6b1a8"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f0264c6b330"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f0264c6b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f0264c4c7a8" loc="60:/opt/tinyos-2.1.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f0264c4c7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264c4caf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f0264c4d080" loc="57:/opt/tinyos-2.1.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f0264c4d080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f0264c4d3d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f0264c4c0e0" loc="59:/opt/tinyos-2.1.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f0264c4c0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264c4c430"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f0264c4d6b8" loc="58:/opt/tinyos-2.1.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f0264c4d6b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264c4da08"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f0264c4db90"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f0264c4dd18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f02651ac1c8" loc="48:/opt/tinyos-2.1.2/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f02651ac1c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f02651ac518"/>
        <function-ref name="runTask" scoped="" ref="0x7f02651ac6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f02651895c8" loc="47:/opt/tinyos-2.1.2/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f02651895c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0265189918"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f0265189aa0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f0265189c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f02650d5c58" loc="56:/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f02650d5c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f02650d4020"/>
        <function-ref name="runTask" scoped="" ref="0x7f02650d41a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f02650d1168" loc="57:/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f02650d1168"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x7f02650d14b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f02650d6d88" loc="55:/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f02650d6d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f02650d5170"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f02650d52f8"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f02650d5480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f0264c3a8d8" loc="45:/opt/tinyos-2.1.2/tos/system/TimerMilliC.nc">
      <component-ref qname="SyncLogAppC.Timer1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f0264c3a8d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511d020"/>
            <typename><typedef-ref name="TMilli" ref="0x7f026511d378"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f0264c37bc0"/>
        <function-ref name="fired" scoped="" ref="0x7f0264c38238"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f0264c37020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f0264c38ad8"/>
        <function-ref name="getdt" scoped="" ref="0x7f0264c354d8"/>
        <function-ref name="gett0" scoped="" ref="0x7f0264c35088"/>
        <function-ref name="isRunning" scoped="" ref="0x7f0264c38688"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f0264c39458"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f0264c375f0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f0264c398f8"/>
        <function-ref name="stop" scoped="" ref="0x7f0264c39d98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LogRead" ref="0x7f02648f1c50" loc="27:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
      <component-ref qname="SyncLogAppC.LogStorageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LogRead" scoped="" ref="0x7f02648f1c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="LogRead"/>
      </instance>
      <interface-functions>
        <function-ref name="seek" scoped="" ref="0x7f02648ef7c8"/>
        <function-ref name="currentOffset" scoped="" ref="0x7f02648ef1a8"/>
        <function-ref name="read" scoped="" ref="0x7f02648ef330"/>
        <function-ref name="seekDone" scoped="" ref="0x7f02648ef4b8"/>
        <function-ref name="getSize" scoped="" ref="0x7f02648ef640"/>
        <function-ref name="readDone" scoped="" ref="0x7f02648ef020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LogWrite" ref="0x7f02648f2d40" loc="26:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageC.nc">
      <component-ref qname="SyncLogAppC.LogStorageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LogWrite" scoped="" ref="0x7f02648f2d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LogWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="currentOffset" scoped="" ref="0x7f02648f10d8"/>
        <function-ref name="syncDone" scoped="" ref="0x7f02648f1260"/>
        <function-ref name="erase" scoped="" ref="0x7f02648f13e8"/>
        <function-ref name="eraseDone" scoped="" ref="0x7f02648f1570"/>
        <function-ref name="appendDone" scoped="" ref="0x7f02648f16f8"/>
        <function-ref name="append" scoped="" ref="0x7f02648f1880"/>
        <function-ref name="sync" scoped="" ref="0x7f02648f1a08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="At45db" ref="0x7f0264bf8398" loc="58:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageP.nc">
      <component-ref qname="LogStorageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="At45db" scoped="" ref="0x7f0264bf8398"/></type-interface>
      <instance>
        <interfacedef-ref qname="At45db"/>
      </instance>
      <interface-functions>
        <function-ref name="copyPageDone" scoped="" ref="0x7f0264c091a8"/>
        <function-ref name="syncDone" scoped="" ref="0x7f0264bf8870"/>
        <function-ref name="flushDone" scoped="" ref="0x7f0264bf89f8"/>
        <function-ref name="read" scoped="" ref="0x7f0264bf8b80"/>
        <function-ref name="writeDone" scoped="" ref="0x7f0264bf8d08"/>
        <function-ref name="copyPage" scoped="" ref="0x7f0264c0a020"/>
        <function-ref name="erase" scoped="" ref="0x7f0264c0a1a8"/>
        <function-ref name="eraseDone" scoped="" ref="0x7f0264c0a330"/>
        <function-ref name="computeCrcDone" scoped="" ref="0x7f0264c0a4b8"/>
        <function-ref name="flush" scoped="" ref="0x7f0264c0a640"/>
        <function-ref name="syncAll" scoped="" ref="0x7f0264c0a7c8"/>
        <function-ref name="flushAll" scoped="" ref="0x7f0264c0a950"/>
        <function-ref name="write" scoped="" ref="0x7f0264c0aad8"/>
        <function-ref name="sync" scoped="" ref="0x7f0264c0ad60"/>
        <function-ref name="computeCrc" scoped="" ref="0x7f0264c09020"/>
        <function-ref name="readDone" scoped="" ref="0x7f0264bf86e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LogRead" ref="0x7f0264c0e208" loc="54:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageP.nc">
      <component-ref qname="LogStorageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LogRead" scoped="" ref="0x7f0264c0e208"/></type-interface>
      <instance>
        <interfacedef-ref qname="LogRead"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="readDone" scoped="" ref="0x7f0264c0ed00"/>
        <function-ref name="currentOffset" scoped="" ref="0x7f0264c0e6e0"/>
        <function-ref name="read" scoped="" ref="0x7f0264c0e868"/>
        <function-ref name="seekDone" scoped="" ref="0x7f0264c0e9f0"/>
        <function-ref name="getSize" scoped="" ref="0x7f0264c0eb78"/>
        <function-ref name="seek" scoped="" ref="0x7f0264c0e558"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="At45dbVolume" ref="0x7f0264bf71c8" loc="59:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageP.nc">
      <component-ref qname="LogStorageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="At45dbVolume" scoped="" ref="0x7f0264bf71c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="At45dbVolume"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="volumeSize" scoped="" ref="0x7f0264bf7518"/>
        <function-ref name="remap" scoped="" ref="0x7f0264bf76a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f0264bf61c8" loc="60:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageP.nc">
      <component-ref qname="LogStorageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f0264bf61c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f0264bf6518"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f0264bf66a0"/>
        <function-ref name="request" scoped="" ref="0x7f0264bf6828"/>
        <function-ref name="granted" scoped="" ref="0x7f0264bf69b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f0264bf6b38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LogWrite" ref="0x7f0264c0c4f0" loc="55:/opt/tinyos-2.1.2/tos/chips/at45db/LogStorageP.nc">
      <component-ref qname="LogStorageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LogWrite" scoped="" ref="0x7f0264c0c4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LogWrite"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="currentOffset" scoped="" ref="0x7f0264c0c840"/>
        <function-ref name="syncDone" scoped="" ref="0x7f0264c0c9c8"/>
        <function-ref name="erase" scoped="" ref="0x7f0264c0cb50"/>
        <function-ref name="eraseDone" scoped="" ref="0x7f0264c0ccd8"/>
        <function-ref name="appendDone" scoped="" ref="0x7f0264c0ce60"/>
        <function-ref name="append" scoped="" ref="0x7f0264c0b020"/>
        <function-ref name="sync" scoped="" ref="0x7f0264c0b1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="At45db" ref="0x7f0264acc140" loc="25:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <component-ref qname="At45dbC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="At45db" scoped="" ref="0x7f0264acc140"/></type-interface>
      <instance>
        <interfacedef-ref qname="At45db"/>
      </instance>
      <interface-functions>
        <function-ref name="copyPageDone" scoped="" ref="0x7f0264acbd60"/>
        <function-ref name="syncDone" scoped="" ref="0x7f0264acc618"/>
        <function-ref name="flushDone" scoped="" ref="0x7f0264acc7a0"/>
        <function-ref name="read" scoped="" ref="0x7f0264acc928"/>
        <function-ref name="writeDone" scoped="" ref="0x7f0264accab0"/>
        <function-ref name="copyPage" scoped="" ref="0x7f0264accc38"/>
        <function-ref name="erase" scoped="" ref="0x7f0264accdc0"/>
        <function-ref name="eraseDone" scoped="" ref="0x7f0264acb020"/>
        <function-ref name="computeCrcDone" scoped="" ref="0x7f0264acb1a8"/>
        <function-ref name="flush" scoped="" ref="0x7f0264acb330"/>
        <function-ref name="syncAll" scoped="" ref="0x7f0264acb4b8"/>
        <function-ref name="flushAll" scoped="" ref="0x7f0264acb640"/>
        <function-ref name="write" scoped="" ref="0x7f0264acb7c8"/>
        <function-ref name="sync" scoped="" ref="0x7f0264acba50"/>
        <function-ref name="computeCrc" scoped="" ref="0x7f0264acbbd8"/>
        <function-ref name="readDone" scoped="" ref="0x7f0264acc490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f0264ac3470" loc="27:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <component-ref qname="At45dbC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f0264ac3470"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f0264ac37c0"/>
        <function-ref name="requested" scoped="" ref="0x7f0264ac3948"/>
        <function-ref name="granted" scoped="" ref="0x7f0264ac3ad0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f0264ac3c58"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f0264ac3de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f0264aca598" loc="26:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <component-ref qname="At45dbC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f0264aca598"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f0264aca8e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f0264acaa70"/>
        <function-ref name="request" scoped="" ref="0x7f0264acabf8"/>
        <function-ref name="granted" scoped="" ref="0x7f0264acad80"/>
        <function-ref name="isOwner" scoped="" ref="0x7f0264ac9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f0264ac17d0" loc="28:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbC.nc">
      <component-ref qname="At45dbC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f0264ac17d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f0264ac1b20"/>
        <function-ref name="userId" scoped="" ref="0x7f0264ac1ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAt45db" ref="0x7f0264aa6ab0" loc="59:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc">
      <component-ref qname="At45dbP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAt45db" scoped="" ref="0x7f0264aa6ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAt45db"/>
      </instance>
      <interface-functions>
        <function-ref name="fill" scoped="" ref="0x7f0264ababd8"/>
        <function-ref name="waitCompare" scoped="" ref="0x7f0264abb020"/>
        <function-ref name="crcDone" scoped="" ref="0x7f0264abb1a8"/>
        <function-ref name="flushDone" scoped="" ref="0x7f0264abb330"/>
        <function-ref name="read" scoped="" ref="0x7f0264abb4b8"/>
        <function-ref name="erase" scoped="" ref="0x7f0264abb640"/>
        <function-ref name="writeDone" scoped="" ref="0x7f0264abb7c8"/>
        <function-ref name="waitIdleDone" scoped="" ref="0x7f0264abb950"/>
        <function-ref name="waitCompareDone" scoped="" ref="0x7f0264abbad8"/>
        <function-ref name="eraseDone" scoped="" ref="0x7f0264abbc60"/>
        <function-ref name="waitIdle" scoped="" ref="0x7f0264abbde8"/>
        <function-ref name="flush" scoped="" ref="0x7f0264aba020"/>
        <function-ref name="write" scoped="" ref="0x7f0264aba1a8"/>
        <function-ref name="compareDone" scoped="" ref="0x7f0264aba430"/>
        <function-ref name="compare" scoped="" ref="0x7f0264aba5b8"/>
        <function-ref name="crc" scoped="" ref="0x7f0264aba740"/>
        <function-ref name="readBuffer" scoped="" ref="0x7f0264aba8c8"/>
        <function-ref name="fillDone" scoped="" ref="0x7f0264abaa50"/>
        <function-ref name="readDone" scoped="" ref="0x7f0264aa6e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="At45db" ref="0x7f0264abe2a8" loc="56:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc">
      <component-ref qname="At45dbP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="At45db" scoped="" ref="0x7f0264abe2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="At45db"/>
      </instance>
      <interface-functions>
        <function-ref name="copyPageDone" scoped="" ref="0x7f0264abc020"/>
        <function-ref name="syncDone" scoped="" ref="0x7f0264abe780"/>
        <function-ref name="flushDone" scoped="" ref="0x7f0264abe908"/>
        <function-ref name="read" scoped="" ref="0x7f0264abea90"/>
        <function-ref name="writeDone" scoped="" ref="0x7f0264abec18"/>
        <function-ref name="copyPage" scoped="" ref="0x7f0264abeda0"/>
        <function-ref name="erase" scoped="" ref="0x7f0264abd020"/>
        <function-ref name="eraseDone" scoped="" ref="0x7f0264abd1a8"/>
        <function-ref name="computeCrcDone" scoped="" ref="0x7f0264abd330"/>
        <function-ref name="flush" scoped="" ref="0x7f0264abd4b8"/>
        <function-ref name="syncAll" scoped="" ref="0x7f0264abd640"/>
        <function-ref name="flushAll" scoped="" ref="0x7f0264abd7c8"/>
        <function-ref name="write" scoped="" ref="0x7f0264abd950"/>
        <function-ref name="sync" scoped="" ref="0x7f0264abdbd8"/>
        <function-ref name="computeCrc" scoped="" ref="0x7f0264abdd60"/>
        <function-ref name="readDone" scoped="" ref="0x7f0264abe5f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f0264aa2a58" loc="60:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc">
      <component-ref qname="At45dbP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f0264aa2a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TMicro" ref="0x7f026511b788"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f0264aa4828"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="taskSuccess" ref="0x7f0264a8d4d8" loc="145:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc">
      <component-ref qname="At45dbP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="taskSuccess" scoped="" ref="0x7f0264a8d4d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f0264a8d828"/>
        <function-ref name="runTask" scoped="" ref="0x7f0264a8d9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="taskFail" ref="0x7f0264a8b190" loc="148:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc">
      <component-ref qname="At45dbP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="taskFail" scoped="" ref="0x7f0264a8b190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f0264a8b4e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f0264a8b668"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f0264ac6ca0" loc="55:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbP.nc">
      <component-ref qname="At45dbP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f0264ac6ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264abe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAt45db" ref="0x7f0264a21e58" loc="20:/opt/tinyos-2.1.2/tos/platforms/mica/chips/at45db/HplAt45dbC.nc">
      <component-ref qname="HplAt45dbC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAt45db" scoped="" ref="0x7f0264a21e58"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f02651a7020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f02651a7020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="HplAt45db"/>
      </instance>
      <interface-functions>
        <function-ref name="fill" scoped="" ref="0x7f0264a1c020"/>
        <function-ref name="waitCompare" scoped="" ref="0x7f0264a1e370"/>
        <function-ref name="crcDone" scoped="" ref="0x7f0264a1e4f8"/>
        <function-ref name="flushDone" scoped="" ref="0x7f0264a1e680"/>
        <function-ref name="read" scoped="" ref="0x7f0264a1e808"/>
        <function-ref name="erase" scoped="" ref="0x7f0264a1e990"/>
        <function-ref name="writeDone" scoped="" ref="0x7f0264a1eb18"/>
        <function-ref name="waitIdleDone" scoped="" ref="0x7f0264a1eca0"/>
        <function-ref name="waitCompareDone" scoped="" ref="0x7f0264a1ee28"/>
        <function-ref name="eraseDone" scoped="" ref="0x7f0264a1d020"/>
        <function-ref name="waitIdle" scoped="" ref="0x7f0264a1d1a8"/>
        <function-ref name="flush" scoped="" ref="0x7f0264a1d330"/>
        <function-ref name="write" scoped="" ref="0x7f0264a1d4b8"/>
        <function-ref name="compareDone" scoped="" ref="0x7f0264a1d740"/>
        <function-ref name="compare" scoped="" ref="0x7f0264a1d8c8"/>
        <function-ref name="crc" scoped="" ref="0x7f0264a1da50"/>
        <function-ref name="readBuffer" scoped="" ref="0x7f0264a1dbd8"/>
        <function-ref name="fillDone" scoped="" ref="0x7f0264a1dd60"/>
        <function-ref name="readDone" scoped="" ref="0x7f0264a1e1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAt45db" ref="0x7f0264a1a6c0" loc="26:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByteC.nc">
      <component-ref qname="HplAt45dbC.HplAt45dbByteC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAt45db" scoped="" ref="0x7f0264a1a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAt45db"/>
      </instance>
      <interface-functions>
        <function-ref name="readDone" scoped="" ref="0x7f02649ce8c8"/>
        <function-ref name="waitCompare" scoped="" ref="0x7f0264a1ab98"/>
        <function-ref name="crcDone" scoped="" ref="0x7f0264a1ad20"/>
        <function-ref name="flushDone" scoped="" ref="0x7f02649cf020"/>
        <function-ref name="read" scoped="" ref="0x7f02649cf1a8"/>
        <function-ref name="erase" scoped="" ref="0x7f02649cf330"/>
        <function-ref name="writeDone" scoped="" ref="0x7f02649cf4b8"/>
        <function-ref name="waitIdleDone" scoped="" ref="0x7f02649cf640"/>
        <function-ref name="waitCompareDone" scoped="" ref="0x7f02649cf7c8"/>
        <function-ref name="eraseDone" scoped="" ref="0x7f02649cf950"/>
        <function-ref name="waitIdle" scoped="" ref="0x7f02649cfad8"/>
        <function-ref name="flush" scoped="" ref="0x7f02649cfc60"/>
        <function-ref name="write" scoped="" ref="0x7f02649cfde8"/>
        <function-ref name="compareDone" scoped="" ref="0x7f02649ce120"/>
        <function-ref name="compare" scoped="" ref="0x7f02649ce2a8"/>
        <function-ref name="crc" scoped="" ref="0x7f02649ce430"/>
        <function-ref name="readBuffer" scoped="" ref="0x7f02649ce5b8"/>
        <function-ref name="fillDone" scoped="" ref="0x7f02649ce740"/>
        <function-ref name="fill" scoped="" ref="0x7f0264a1aa10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAt45dbByte" ref="0x7f02649cde60" loc="30:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByteC.nc">
      <component-ref qname="HplAt45dbC.HplAt45dbByteC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAt45dbByte" scoped="" ref="0x7f02649cde60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAt45dbByte"/>
      </instance>
      <interface-functions>
        <function-ref name="getCompareStatus" scoped="" ref="0x7f02649cc1e8"/>
        <function-ref name="waitIdle" scoped="" ref="0x7f02649cc370"/>
        <function-ref name="idle" scoped="" ref="0x7f02649cc4f8"/>
        <function-ref name="select" scoped="" ref="0x7f02649cc680"/>
        <function-ref name="deselect" scoped="" ref="0x7f02649cc808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f02649ceb70" loc="28:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByteC.nc">
      <component-ref qname="HplAt45dbC.HplAt45dbByteC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f02649ceb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f02649cd020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f02649cd1a8"/>
        <function-ref name="request" scoped="" ref="0x7f02649cd330"/>
        <function-ref name="granted" scoped="" ref="0x7f02649cd4b8"/>
        <function-ref name="isOwner" scoped="" ref="0x7f02649cd640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FlashSpi" ref="0x7f02649cd8c8" loc="29:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByteC.nc">
      <component-ref qname="HplAt45dbC.HplAt45dbByteC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FlashSpi" scoped="" ref="0x7f02649cd8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f02649cdc18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAt45dbByte" ref="0x7f02649c7640" loc="56:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <component-ref qname="HplAt45dbIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAt45dbByte" scoped="" ref="0x7f02649c7640"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAt45dbByte"/>
      </instance>
      <interface-functions>
        <function-ref name="getCompareStatus" scoped="" ref="0x7f02649c7990"/>
        <function-ref name="waitIdle" scoped="" ref="0x7f02649c7b18"/>
        <function-ref name="idle" scoped="" ref="0x7f02649c7ca0"/>
        <function-ref name="select" scoped="" ref="0x7f02649c7e28"/>
        <function-ref name="deselect" scoped="" ref="0x7f02649c6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f02649c8360" loc="54:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <component-ref qname="HplAt45dbIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f02649c8360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f02649c86b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f02649c8838"/>
        <function-ref name="request" scoped="" ref="0x7f02649c89c0"/>
        <function-ref name="granted" scoped="" ref="0x7f02649c8b48"/>
        <function-ref name="isOwner" scoped="" ref="0x7f02649c8cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FlashSpi" ref="0x7f02649c7020" loc="55:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOC.nc">
      <component-ref qname="HplAt45dbIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FlashSpi" scoped="" ref="0x7f02649c7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f02649c7370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="In" ref="0x7f02649bedd8" loc="100:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <component-ref qname="HplAt45dbIOP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="In" scoped="" ref="0x7f02649bedd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02649bd170"/>
        <function-ref name="isInput" scoped="" ref="0x7f02649bd2f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f02649bd480"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02649bd608"/>
        <function-ref name="get" scoped="" ref="0x7f02649bd790"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02649bd918"/>
        <function-ref name="set" scoped="" ref="0x7f02649bdaa0"/>
        <function-ref name="clr" scoped="" ref="0x7f02649bdc28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f02649bc1e0" loc="101:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <component-ref qname="HplAt45dbIOP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f02649bc1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TMicro" ref="0x7f026511b788"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f02649bb020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Out" ref="0x7f02649bfc58" loc="99:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <component-ref qname="HplAt45dbIOP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Out" scoped="" ref="0x7f02649bfc58"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02649be020"/>
        <function-ref name="isInput" scoped="" ref="0x7f02649be1a8"/>
        <function-ref name="toggle" scoped="" ref="0x7f02649be330"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02649be4b8"/>
        <function-ref name="get" scoped="" ref="0x7f02649be640"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02649be7c8"/>
        <function-ref name="set" scoped="" ref="0x7f02649be950"/>
        <function-ref name="clr" scoped="" ref="0x7f02649bead8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Select" ref="0x7f02649c1860" loc="97:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <component-ref qname="HplAt45dbIOP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Select" scoped="" ref="0x7f02649c1860"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02649c1bb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02649c1d38"/>
        <function-ref name="toggle" scoped="" ref="0x7f02649c0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02649c01a8"/>
        <function-ref name="get" scoped="" ref="0x7f02649c0330"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02649c04b8"/>
        <function-ref name="set" scoped="" ref="0x7f02649c0640"/>
        <function-ref name="clr" scoped="" ref="0x7f02649c07c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAt45dbByte" ref="0x7f02649c3a20" loc="94:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <component-ref qname="HplAt45dbIOP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAt45dbByte" scoped="" ref="0x7f02649c3a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAt45dbByte"/>
      </instance>
      <interface-functions>
        <function-ref name="getCompareStatus" scoped="" ref="0x7f02649c3d70"/>
        <function-ref name="waitIdle" scoped="" ref="0x7f02649c1020"/>
        <function-ref name="idle" scoped="" ref="0x7f02649c11a8"/>
        <function-ref name="select" scoped="" ref="0x7f02649c1330"/>
        <function-ref name="deselect" scoped="" ref="0x7f02649c14b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Clk" ref="0x7f02649c0ad0" loc="98:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <component-ref qname="HplAt45dbIOP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Clk" scoped="" ref="0x7f02649c0ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02649c0e20"/>
        <function-ref name="isInput" scoped="" ref="0x7f02649bf020"/>
        <function-ref name="toggle" scoped="" ref="0x7f02649bf1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02649bf330"/>
        <function-ref name="get" scoped="" ref="0x7f02649bf4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02649bf640"/>
        <function-ref name="set" scoped="" ref="0x7f02649bf7c8"/>
        <function-ref name="clr" scoped="" ref="0x7f02649bf950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="avail" ref="0x7f026499fbf8" loc="163:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <component-ref qname="HplAt45dbIOP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="avail" scoped="" ref="0x7f026499fbf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f026499e020"/>
        <function-ref name="runTask" scoped="" ref="0x7f026499e1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f02649c6d30" loc="92:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <component-ref qname="HplAt45dbIOP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f02649c6d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f02649c30d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FlashSpi" ref="0x7f02649c3400" loc="93:/opt/tinyos-2.1.2/tos/platforms/iris/chips/at45db/HplAt45dbIOP.nc">
      <component-ref qname="HplAt45dbIOP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FlashSpi" scoped="" ref="0x7f02649c3400"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f02649c3750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f0264995b98" loc="36:/opt/tinyos-2.1.2/tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f0264995b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TMicro" ref="0x7f026511b788"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f0264992930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f026497d740" loc="22:/opt/tinyos-2.1.2/tos/system/NoArbiterC.nc">
      <component-ref qname="HplAt45dbIOC.NoArbiterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f026497d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f026497da90"/>
        <function-ref name="configure" scoped="" ref="0x7f026497dc18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f026498daa8" loc="21:/opt/tinyos-2.1.2/tos/system/NoArbiterC.nc">
      <component-ref qname="HplAt45dbIOC.NoArbiterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f026498daa8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f026498ddf8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f026497d020"/>
        <function-ref name="request" scoped="" ref="0x7f026497d1a8"/>
        <function-ref name="granted" scoped="" ref="0x7f026497d330"/>
        <function-ref name="isOwner" scoped="" ref="0x7f026497d4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="granted" ref="0x7f026497c020" loc="25:/opt/tinyos-2.1.2/tos/system/NoArbiterC.nc">
      <component-ref qname="HplAt45dbIOC.NoArbiterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="granted" scoped="" ref="0x7f026497c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f026497c370"/>
        <function-ref name="runTask" scoped="" ref="0x7f026497c4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f0264904d18" loc="92:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <component-ref qname="At45dbC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f0264904d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f02649030d8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f0264903260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f0264902960" loc="96:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <component-ref qname="At45dbC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f0264902960"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f0264902cd0"/>
        <function-ref name="configure" scoped="" ref="0x7f0264902e58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f02649034a8" loc="93:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <component-ref qname="At45dbC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f02649034a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f02649037f8"/>
        <function-ref name="requested" scoped="" ref="0x7f0264903980"/>
        <function-ref name="granted" scoped="" ref="0x7f0264903b08"/>
        <function-ref name="isOwner" scoped="" ref="0x7f0264903c90"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f0264903e18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f0264904020" loc="91:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <component-ref qname="At45dbC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f0264904020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f0264904390"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f0264904518"/>
        <function-ref name="request" scoped="" ref="0x7f02649046a0"/>
        <function-ref name="granted" scoped="" ref="0x7f0264904828"/>
        <function-ref name="isOwner" scoped="" ref="0x7f02649049b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f02649020e0" loc="94:/opt/tinyos-2.1.2/tos/system/FcfsArbiterC.nc">
      <component-ref qname="At45dbC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f02649020e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f0264902430"/>
        <function-ref name="userId" scoped="" ref="0x7f02649025b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f02640f29c8" loc="44:/opt/tinyos-2.1.2/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="At45dbC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f02640f29c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f02640f2d18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f02640f1020" loc="45:/opt/tinyos-2.1.2/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="At45dbC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f02640f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f02640f1370"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f02640f14f8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f02640f1680"/>
        <function-ref name="dequeue" scoped="" ref="0x7f02640f1808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f02640efd58" loc="55:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <component-ref qname="At45dbC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f02640efd58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f02640ee0f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f02640ee278"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f02640ed980" loc="60:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <component-ref qname="At45dbC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f02640ed980"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f02640edcf0"/>
        <function-ref name="configure" scoped="" ref="0x7f02640ede78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f02640ec130" loc="61:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <component-ref qname="At45dbC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f02640ec130"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f02640ec480"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f02640ec608"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f02640ec790"/>
        <function-ref name="dequeue" scoped="" ref="0x7f02640ec918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f02640ee4c0" loc="56:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <component-ref qname="At45dbC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f02640ee4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f02640ee810"/>
        <function-ref name="requested" scoped="" ref="0x7f02640ee998"/>
        <function-ref name="granted" scoped="" ref="0x7f02640eeb20"/>
        <function-ref name="isOwner" scoped="" ref="0x7f02640eeca8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f02640eee30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f02640ecb60" loc="62:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <component-ref qname="At45dbC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f02640ecb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f02640ea020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f02640ea1a8"/>
        <function-ref name="led1On" scoped="" ref="0x7f02640ea330"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f02640ea4b8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f02640ea640"/>
        <function-ref name="get" scoped="" ref="0x7f02640ea7c8"/>
        <function-ref name="led1Off" scoped="" ref="0x7f02640ea950"/>
        <function-ref name="led0On" scoped="" ref="0x7f02640e9020"/>
        <function-ref name="set" scoped="" ref="0x7f02640eac60"/>
        <function-ref name="led2On" scoped="" ref="0x7f02640eaad8"/>
        <function-ref name="led2Off" scoped="" ref="0x7f02640eade8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f02640ef060" loc="54:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <component-ref qname="At45dbC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f02640ef060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f02640ef3d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f02640ef558"/>
        <function-ref name="request" scoped="" ref="0x7f02640ef6e0"/>
        <function-ref name="granted" scoped="" ref="0x7f02640ef868"/>
        <function-ref name="isOwner" scoped="" ref="0x7f02640ef9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f02640ed0e0" loc="57:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <component-ref qname="At45dbC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f02640ed0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f02640ed430"/>
        <function-ref name="userId" scoped="" ref="0x7f02640ed5b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f02640e92e8" loc="75:/opt/tinyos-2.1.2/tos/system/ArbiterP.nc">
      <component-ref qname="At45dbC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f02640e92e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f02640e9638"/>
        <function-ref name="runTask" scoped="" ref="0x7f02640e97c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="At45dbVolume" ref="0x7f02648f9780" loc="18:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbStorageManagerC.nc">
      <component-ref qname="At45dbStorageManagerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="At45dbVolume" scoped="" ref="0x7f02648f9780"/></type-interface>
      <instance>
        <interfacedef-ref qname="At45dbVolume"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="volume_id_t" ref="0x7f026508cc40"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="volumeSize" scoped="" ref="0x7f02648f9ad0"/>
        <function-ref name="remap" scoped="" ref="0x7f02648f9c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f02648eec58" loc="46:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f02648eec58"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f02648eb020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f02648eb1a8"/>
        <function-ref name="start" scoped="" ref="0x7f02648eb330"/>
        <function-ref name="stop" scoped="" ref="0x7f02648eb4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f02648ebc30" loc="47:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f02648ebc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f0265004d78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f02648ea020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f02648ea1a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f02648ea330"/>
        <function-ref name="cancel" scoped="" ref="0x7f02648ea4b8"/>
        <function-ref name="sendDone" scoped="" ref="0x7f02648ea640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f02648e8020" loc="49:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f02648e8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f02648e8370"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f02648e84f8"/>
        <function-ref name="getPayload" scoped="" ref="0x7f02648e8680"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f02648e8808"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f02648e8990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f02648e39c0" loc="48:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f02648e39c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f0265004d78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f02648e3d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f02648ca480" loc="53:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f02648ca480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f02648ca7d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f02648ca958"/>
        <function-ref name="led1On" scoped="" ref="0x7f02648caae0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f02648cac68"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f02648cadf0"/>
        <function-ref name="get" scoped="" ref="0x7f02648c9020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f02648c91a8"/>
        <function-ref name="led2Off" scoped="" ref="0x7f02648c97c8"/>
        <function-ref name="set" scoped="" ref="0x7f02648c9330"/>
        <function-ref name="led0On" scoped="" ref="0x7f02648c94b8"/>
        <function-ref name="led2On" scoped="" ref="0x7f02648c9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f02648c5a80" loc="51:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f02648c5a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f02648c5dd0"/>
        <function-ref name="noAck" scoped="" ref="0x7f02648ca020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f02648ca1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f02648cb8a0" loc="50:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f02648cb8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f02648cbbf0"/>
        <function-ref name="source" scoped="" ref="0x7f02648cbd78"/>
        <function-ref name="address" scoped="" ref="0x7f02648e5020"/>
        <function-ref name="destination" scoped="" ref="0x7f02648e51a8"/>
        <function-ref name="setSource" scoped="" ref="0x7f02648e5330"/>
        <function-ref name="setDestination" scoped="" ref="0x7f02648e54b8"/>
        <function-ref name="type" scoped="" ref="0x7f02648e5640"/>
        <function-ref name="setType" scoped="" ref="0x7f02648e57c8"/>
        <function-ref name="isForMe" scoped="" ref="0x7f02648e5950"/>
        <function-ref name="setGroup" scoped="" ref="0x7f02648e5ad8"/>
        <function-ref name="localGroup" scoped="" ref="0x7f02648e5c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f0264865bb0" loc="54:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f0264865bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f0264864020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f02648641a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f0264864330"/>
        <function-ref name="cancel" scoped="" ref="0x7f02648644b8"/>
        <function-ref name="sendDone" scoped="" ref="0x7f0264864640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f02648648c8" loc="55:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f02648648c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f0264864c18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f02648c2b60" loc="47:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f02648c2b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f0265004d78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f0264869020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f02648691a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f0264869330"/>
        <function-ref name="cancel" scoped="" ref="0x7f02648694b8"/>
        <function-ref name="sendDone" scoped="" ref="0x7f0264869640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f0264866578" loc="50:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f0264866578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f02648668c8"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f0264866a50"/>
        <function-ref name="getPayload" scoped="" ref="0x7f0264866bd8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f0264866d60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f0264865020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f02648699a8" loc="48:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f02648699a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f0265004d78"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f0264869d18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f0264865268" loc="51:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f0264865268"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f02648655b8"/>
        <function-ref name="noAck" scoped="" ref="0x7f0264865740"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f02648658c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f0264868020" loc="49:/opt/tinyos-2.1.2/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f0264868020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f0264868370"/>
        <function-ref name="source" scoped="" ref="0x7f02648684f8"/>
        <function-ref name="address" scoped="" ref="0x7f0264868680"/>
        <function-ref name="destination" scoped="" ref="0x7f0264868808"/>
        <function-ref name="setSource" scoped="" ref="0x7f0264868990"/>
        <function-ref name="setDestination" scoped="" ref="0x7f0264868b18"/>
        <function-ref name="type" scoped="" ref="0x7f0264868ca0"/>
        <function-ref name="setType" scoped="" ref="0x7f0264868e28"/>
        <function-ref name="isForMe" scoped="" ref="0x7f0264866020"/>
        <function-ref name="setGroup" scoped="" ref="0x7f02648661a8"/>
        <function-ref name="localGroup" scoped="" ref="0x7f0264866330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f026485f2e8" loc="50:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f026485f2e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f026485f638"/>
        <function-ref name="stopDone" scoped="" ref="0x7f026485f7c0"/>
        <function-ref name="start" scoped="" ref="0x7f026485f948"/>
        <function-ref name="stop" scoped="" ref="0x7f026485fad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f026485ece8" loc="52:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f026485ece8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f0264ffaac8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f026485d0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f026485d228"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f026485d3b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f026485d538"/>
        <function-ref name="sendDone" scoped="" ref="0x7f026485d6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f0264862b98" loc="49:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f0264862b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f026485f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f026485e270" loc="51:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f026485e270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f0264ffaac8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f026485e5c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f026485c5a8" loc="56:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f026485c5a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f026485c8f8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f026485ca80"/>
        <function-ref name="led1On" scoped="" ref="0x7f026485cc08"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f026485cd90"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f026485b020"/>
        <function-ref name="get" scoped="" ref="0x7f026485b1a8"/>
        <function-ref name="led1Off" scoped="" ref="0x7f026485b330"/>
        <function-ref name="led2Off" scoped="" ref="0x7f026485b950"/>
        <function-ref name="set" scoped="" ref="0x7f026485b4b8"/>
        <function-ref name="led0On" scoped="" ref="0x7f026485b640"/>
        <function-ref name="led2On" scoped="" ref="0x7f026485b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f0264857ba8" loc="55:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f0264857ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f0264ffaac8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f026485c020"/>
        <function-ref name="offset" scoped="" ref="0x7f026485c1a8"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f026485c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f0264856a00" loc="66:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f0264856a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f0264856d50"/>
        <function-ref name="stopDone" scoped="" ref="0x7f0264853020"/>
        <function-ref name="start" scoped="" ref="0x7f02648531a8"/>
        <function-ref name="stop" scoped="" ref="0x7f0264853330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f02647eedd0" loc="332:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x7f02647eedd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f02647ed170"/>
        <function-ref name="runTask" scoped="" ref="0x7f02647ed2f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f026483eb00" loc="74:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7f026483eb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f026483ee50"/>
        <function-ref name="stop" scoped="" ref="0x7f0264840020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f02648248e0" loc="191:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x7f02648248e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f0264824c30"/>
        <function-ref name="runTask" scoped="" ref="0x7f0264824db8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f02648563e8" loc="65:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f02648563e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f0264856738"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f026483c608" loc="75:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x7f026483c608"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f026483c958"/>
        <function-ref name="flush" scoped="" ref="0x7f026483cae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f02647f1590" loc="322:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x7f02647f1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f02647f18e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f02647f1a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f0264843b38" loc="72:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f0264843b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f026484b020"/>
        <function-ref name="resetSend" scoped="" ref="0x7f026484b1a8"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f026484b330"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f026484b4b8"/>
        <function-ref name="putData" scoped="" ref="0x7f026484b640"/>
        <function-ref name="putDone" scoped="" ref="0x7f026484b7c8"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f026484b950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f026484bbc8" loc="73:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f026484bbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f0264847020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f02648471a8"/>
        <function-ref name="led1On" scoped="" ref="0x7f0264847330"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f02648474b8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f0264847640"/>
        <function-ref name="get" scoped="" ref="0x7f02648477c8"/>
        <function-ref name="led1Off" scoped="" ref="0x7f0264847950"/>
        <function-ref name="led2Off" scoped="" ref="0x7f0264841020"/>
        <function-ref name="set" scoped="" ref="0x7f0264847ad8"/>
        <function-ref name="led0On" scoped="" ref="0x7f0264847c60"/>
        <function-ref name="led2On" scoped="" ref="0x7f0264847de8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f02647ea020" loc="341:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f02647ea020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f02647ea370"/>
        <function-ref name="runTask" scoped="" ref="0x7f02647ea4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f026484c6f8" loc="67:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f026484c6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f026484ca48"/>
        <function-ref name="nextByte" scoped="" ref="0x7f026484cbd0"/>
        <function-ref name="startSend" scoped="" ref="0x7f026484cd58"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f0264852020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f02648499f8" loc="68:/opt/tinyos-2.1.2/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f02648499f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f0264849d48"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f0264850020"/>
        <function-ref name="endPacket" scoped="" ref="0x7f02648501a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f0264727908" loc="275:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x7f0264727908"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f0264727c58"/>
        <function-ref name="runTask" scoped="" ref="0x7f0264727de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f026472b6f8" loc="51:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f026472b6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f0264ffaac8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f026472ba68"/>
        <function-ref name="getPayload" scoped="" ref="0x7f026472bbf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f026472bd78"/>
        <function-ref name="cancel" scoped="" ref="0x7f026472a020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f026472a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f0264726100" loc="158:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x7f0264726100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f0264726450"/>
        <function-ref name="runTask" scoped="" ref="0x7f02647265d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f026472b020" loc="50:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f026472b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f0264ffaac8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f026472b390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f026472a5b0" loc="54:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x7f026472a5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f0264ffaac8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f026472a920"/>
        <function-ref name="offset" scoped="" ref="0x7f026472aaa8"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f026472ac30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f0264728268" loc="57:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f0264728268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f02647285b8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f0264728740"/>
        <function-ref name="led1On" scoped="" ref="0x7f02647288c8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f0264728a50"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f0264728bd8"/>
        <function-ref name="get" scoped="" ref="0x7f0264728d60"/>
        <function-ref name="led1Off" scoped="" ref="0x7f0264727020"/>
        <function-ref name="led2On" scoped="" ref="0x7f0264727640"/>
        <function-ref name="set" scoped="" ref="0x7f0264727330"/>
        <function-ref name="led2Off" scoped="" ref="0x7f02647271a8"/>
        <function-ref name="led0On" scoped="" ref="0x7f02647274b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f0264729750" loc="56:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f0264729750"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f0264729aa0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f0264729c28"/>
        <function-ref name="startSend" scoped="" ref="0x7f0264729db0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f0264728020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f026472ae78" loc="55:/opt/tinyos-2.1.2/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f026472ae78"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f02647291f8"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f0264729380"/>
        <function-ref name="endPacket" scoped="" ref="0x7f0264729508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f0264717c98" loc="50:/opt/tinyos-2.1.2/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f0264717c98"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f026471f020"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f026471f1a8"/>
        <function-ref name="receive" scoped="" ref="0x7f026471f330"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f026471f4b8"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f026471f640"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f026471f7c8"/>
        <function-ref name="sendDone" scoped="" ref="0x7f026471f950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f0264722328" loc="48:/opt/tinyos-2.1.2/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f0264722328"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f0264722678"/>
        <function-ref name="resetSend" scoped="" ref="0x7f0264722800"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f0264722988"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f0264722b10"/>
        <function-ref name="putData" scoped="" ref="0x7f0264722c98"/>
        <function-ref name="putDone" scoped="" ref="0x7f0264722e20"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f0264721020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f026471fbc8" loc="51:/opt/tinyos-2.1.2/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f026471fbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f026471e020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f026471e1a8"/>
        <function-ref name="led1On" scoped="" ref="0x7f026471e330"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f026471e4b8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f026471e640"/>
        <function-ref name="get" scoped="" ref="0x7f026471e7c8"/>
        <function-ref name="led1Off" scoped="" ref="0x7f026471e950"/>
        <function-ref name="led2Off" scoped="" ref="0x7f0264714020"/>
        <function-ref name="set" scoped="" ref="0x7f026471ead8"/>
        <function-ref name="led0On" scoped="" ref="0x7f026471ec60"/>
        <function-ref name="led2On" scoped="" ref="0x7f026471ede8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f02646f6cc8" loc="42:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f02646f6cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f02646f90a0"/>
        <function-ref name="receive" scoped="" ref="0x7f02646f9228"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f02646fba80" loc="41:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f02646fba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f02646fbdd0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f02646fa020"/>
        <function-ref name="receive" scoped="" ref="0x7f02646fa1a8"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f02646fa330"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f02646fa4b8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f02646fa640"/>
        <function-ref name="sendDone" scoped="" ref="0x7f02646fa7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f02646fb2b8" loc="40:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f02646fb2b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f02646fb608"/>
        <function-ref name="stop" scoped="" ref="0x7f02646fb790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f02646f2488" loc="41:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f02646f2488"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f02646f27d8"/>
        <function-ref name="receive" scoped="" ref="0x7f02646f2960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f02646f2c50" loc="42:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f02646f2c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f02646f1020"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f02646f11a8"/>
        <function-ref name="receive" scoped="" ref="0x7f02646f1330"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f02646f14b8"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f02646f1640"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f02646f17c8"/>
        <function-ref name="sendDone" scoped="" ref="0x7f02646f1950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f02646f0020" loc="43:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f02646f0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TMicro" ref="0x7f026511b788"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f02646f0d70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f02646ef6b8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f02646ef230"/>
        <function-ref name="overflow" scoped="" ref="0x7f02646efb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f02646f5b38" loc="40:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f02646f5b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f02646f2020"/>
        <function-ref name="stop" scoped="" ref="0x7f02646f21a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f02646ab430" loc="50:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f02646ab430"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f02646ab780"/>
        <function-ref name="receive" scoped="" ref="0x7f02646ab908"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x7f02646aac18" loc="53:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x7f02646aac18"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f02646a9020"/>
        <function-ref name="stop" scoped="" ref="0x7f02646a91a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f02646ec610" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f02646ec610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f02646ec960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f02646abb90" loc="51:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f02646abb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f02646aa020"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f02646aa1a8"/>
        <function-ref name="receive" scoped="" ref="0x7f02646aa330"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f02646aa4b8"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f02646aa640"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f02646aa7c8"/>
        <function-ref name="sendDone" scoped="" ref="0x7f02646aa950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f02646a72d0" loc="56:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f02646a72d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TMicro" ref="0x7f026511b788"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f02646a6088"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f02646a6998"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f02646a6510"/>
        <function-ref name="overflow" scoped="" ref="0x7f02646a6e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x7f02646a9c10" loc="55:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x7f02646a9c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f02646a8020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f02646a81a8"/>
        <function-ref name="rxDone" scoped="" ref="0x7f02646a8330"/>
        <function-ref name="txDone" scoped="" ref="0x7f02646a84b8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f02646a8640"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f02646a87c8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f02646a8950"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f02646a8ad8"/>
        <function-ref name="tx" scoped="" ref="0x7f02646a8c60"/>
        <function-ref name="rx" scoped="" ref="0x7f02646a8de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f02646ecbe8" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f02646ecbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f02646ab020"/>
        <function-ref name="stop" scoped="" ref="0x7f02646ab1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x7f02646a9470" loc="54:/opt/tinyos-2.1.2/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x7f02646a9470"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f02646a97c0"/>
        <function-ref name="stop" scoped="" ref="0x7f02646a9948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f0264688158" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f0264688158"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f02646884a8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f0264688630"/>
        <function-ref name="rxDone" scoped="" ref="0x7f02646887b8"/>
        <function-ref name="txDone" scoped="" ref="0x7f0264688940"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f0264688ac8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f0264688c50"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f0264688dd8"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f0264687020"/>
        <function-ref name="tx" scoped="" ref="0x7f02646871a8"/>
        <function-ref name="rx" scoped="" ref="0x7f0264687330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f0264681860" loc="53:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f0264681860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f0264681bb0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f0264681d38"/>
        <function-ref name="rxDone" scoped="" ref="0x7f0264680020"/>
        <function-ref name="txDone" scoped="" ref="0x7f02646801a8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f0264680330"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f02646804b8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f0264680640"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f02646807c8"/>
        <function-ref name="tx" scoped="" ref="0x7f0264680950"/>
        <function-ref name="rx" scoped="" ref="0x7f0264680ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f026468a8b8" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f026468a8b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f026468ac08"/>
        <function-ref name="stop" scoped="" ref="0x7f026468ad90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f02646876b0" loc="51:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f02646876b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f0264687a00"/>
        <function-ref name="stop" scoped="" ref="0x7f0264687b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f0264681020" loc="52:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f0264681020"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f0264681370"/>
        <function-ref name="stop" scoped="" ref="0x7f02646814f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f026468a060" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f026468a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f026468a3b0"/>
        <function-ref name="stop" scoped="" ref="0x7f026468a538"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x7f026467f7e0" loc="114:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x7f026467f7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f026467fb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f026467b158" loc="117:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f026467b158"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f026467b4a8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f026467b630"/>
        <function-ref name="rxDone" scoped="" ref="0x7f026467b7b8"/>
        <function-ref name="txDone" scoped="" ref="0x7f026467b940"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f026467bac8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f026467bc50"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f026467bdd8"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f026467a020"/>
        <function-ref name="tx" scoped="" ref="0x7f026467a1a8"/>
        <function-ref name="rx" scoped="" ref="0x7f026467a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x7f026467a688" loc="119:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x7f026467a688"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f026467a9d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f0264678020" loc="122:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f0264678020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f0264678370"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f02646784f8"/>
        <function-ref name="rxDone" scoped="" ref="0x7f0264678680"/>
        <function-ref name="txDone" scoped="" ref="0x7f0264678808"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f0264678990"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f0264678b18"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f0264678ca0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f0264678e28"/>
        <function-ref name="tx" scoped="" ref="0x7f0264677020"/>
        <function-ref name="rx" scoped="" ref="0x7f02646771a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f026467c8b8" loc="116:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f026467c8b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f026467cc08"/>
        <function-ref name="stop" scoped="" ref="0x7f026467cd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f026467ad98" loc="120:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f026467ad98"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f0264679170"/>
        <function-ref name="stop" scoped="" ref="0x7f02646792f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f02646796b8" loc="121:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f02646796b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f0264679a08"/>
        <function-ref name="stop" scoped="" ref="0x7f0264679b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x7f02646774c8" loc="124:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f02646774c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f0264677818"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f02646779a0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f0264677b28"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f0264677cb0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f0264677e38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f02646761a8" loc="125:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f02646761a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f02646764f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f026467c020" loc="115:/opt/tinyos-2.1.2/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f026467c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f026467c370"/>
        <function-ref name="stop" scoped="" ref="0x7f026467c4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f026461ba88" loc="24:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f026461ba88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TMicro" ref="0x7f026511b788"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f0264618828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f0264616190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f0264618cb0"/>
        <function-ref name="overflow" scoped="" ref="0x7f0264616618"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f02646157f8" loc="24:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f02646157f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TThree" ref="0x7f02650dbd70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f0264612578"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f0264611020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f0264612a00"/>
        <function-ref name="overflow" scoped="" ref="0x7f02646114a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f02645ff1f0" loc="80:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f02645ff1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f02645ff540"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f02645ff6c8"/>
        <function-ref name="getControlA" scoped="" ref="0x7f02645ff850"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f02645ff9d8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f02645ffb60"/>
        <function-ref name="setControlB" scoped="" ref="0x7f02645ffce8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f02645ffe70"/>
        <function-ref name="getControlB" scoped="" ref="0x7f0264607020"/>
        <function-ref name="setControlC" scoped="" ref="0x7f02646071a8"/>
        <function-ref name="setControlA" scoped="" ref="0x7f0264607330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f02645f8b68" loc="81:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f02645f8b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f02645f6db8"/>
        <function-ref name="test" scoped="" ref="0x7f02645f64a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264606728"/>
        <function-ref name="captured" scoped="" ref="0x7f02645fe0c0"/>
        <function-ref name="reset" scoped="" ref="0x7f02645fe598"/>
        <function-ref name="isOn" scoped="" ref="0x7f02645f6930"/>
        <function-ref name="set" scoped="" ref="0x7f0264606bb0"/>
        <function-ref name="start" scoped="" ref="0x7f02645fea20"/>
        <function-ref name="stop" scoped="" ref="0x7f02645f6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f02645f49c0" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f02645f49c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f02645f1270"/>
        <function-ref name="fired" scoped="" ref="0x7f02645f2020"/>
        <function-ref name="get" scoped="" ref="0x7f02645f3598"/>
        <function-ref name="reset" scoped="" ref="0x7f02645f24a8"/>
        <function-ref name="isOn" scoped="" ref="0x7f02645f16f8"/>
        <function-ref name="set" scoped="" ref="0x7f02645f3a20"/>
        <function-ref name="start" scoped="" ref="0x7f02645f2930"/>
        <function-ref name="stop" scoped="" ref="0x7f02645f2db8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f026460e570" loc="79:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f026460e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f026460a6f8"/>
        <function-ref name="test" scoped="" ref="0x7f026460bdb8"/>
        <function-ref name="get" scoped="" ref="0x7f026460c130"/>
        <function-ref name="setScale" scoped="" ref="0x7f026460ab80"/>
        <function-ref name="getScale" scoped="" ref="0x7f0264609088"/>
        <function-ref name="reset" scoped="" ref="0x7f026460b020"/>
        <function-ref name="overflow" scoped="" ref="0x7f026460ca90"/>
        <function-ref name="isOn" scoped="" ref="0x7f026460a270"/>
        <function-ref name="set" scoped="" ref="0x7f026460c5b8"/>
        <function-ref name="start" scoped="" ref="0x7f026460b4a8"/>
        <function-ref name="stop" scoped="" ref="0x7f026460b930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f02645e8c90" loc="80:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f02645e8c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f02645e7020"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f02645e71a8"/>
        <function-ref name="getControlA" scoped="" ref="0x7f02645e7330"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f02645e74b8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f02645e7640"/>
        <function-ref name="setControlB" scoped="" ref="0x7f02645e77c8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f02645e7950"/>
        <function-ref name="getControlB" scoped="" ref="0x7f02645e7ad8"/>
        <function-ref name="setControlC" scoped="" ref="0x7f02645e7c60"/>
        <function-ref name="setControlA" scoped="" ref="0x7f02645e7de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f02645e2c48" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f02645e2c48"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f02645de4a8"/>
        <function-ref name="fired" scoped="" ref="0x7f02645df1d0"/>
        <function-ref name="get" scoped="" ref="0x7f02645e1820"/>
        <function-ref name="reset" scoped="" ref="0x7f02645df658"/>
        <function-ref name="isOn" scoped="" ref="0x7f02645de930"/>
        <function-ref name="set" scoped="" ref="0x7f02645e1ca8"/>
        <function-ref name="start" scoped="" ref="0x7f02645dfae0"/>
        <function-ref name="stop" scoped="" ref="0x7f02645de020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f02645e6350" loc="81:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f02645e6350"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f02645e2580"/>
        <function-ref name="test" scoped="" ref="0x7f02645e3c20"/>
        <function-ref name="get" scoped="" ref="0x7f02645e5020"/>
        <function-ref name="captured" scoped="" ref="0x7f02645e5980"/>
        <function-ref name="reset" scoped="" ref="0x7f02645e5e58"/>
        <function-ref name="isOn" scoped="" ref="0x7f02645e20f8"/>
        <function-ref name="set" scoped="" ref="0x7f02645e54a8"/>
        <function-ref name="start" scoped="" ref="0x7f02645e3310"/>
        <function-ref name="stop" scoped="" ref="0x7f02645e3798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f02645dd020" loc="83:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f02645dd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f02645da7a8"/>
        <function-ref name="fired" scoped="" ref="0x7f02645dc560"/>
        <function-ref name="get" scoped="" ref="0x7f02645ddba0"/>
        <function-ref name="reset" scoped="" ref="0x7f02645dc9e8"/>
        <function-ref name="isOn" scoped="" ref="0x7f02645dac30"/>
        <function-ref name="set" scoped="" ref="0x7f02645dc088"/>
        <function-ref name="start" scoped="" ref="0x7f02645dce70"/>
        <function-ref name="stop" scoped="" ref="0x7f02645da320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f02645d9360" loc="84:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f02645d9360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f02645d6c20"/>
        <function-ref name="fired" scoped="" ref="0x7f02645d8980"/>
        <function-ref name="get" scoped="" ref="0x7f02645d8020"/>
        <function-ref name="reset" scoped="" ref="0x7f02645d8e08"/>
        <function-ref name="isOn" scoped="" ref="0x7f02645d50f8"/>
        <function-ref name="set" scoped="" ref="0x7f02645d84a8"/>
        <function-ref name="start" scoped="" ref="0x7f02645d6310"/>
        <function-ref name="stop" scoped="" ref="0x7f02645d6798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f02645efbe0" loc="79:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f02645efbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f02645e9db8"/>
        <function-ref name="test" scoped="" ref="0x7f02645e94a8"/>
        <function-ref name="get" scoped="" ref="0x7f02645ec7a0"/>
        <function-ref name="setScale" scoped="" ref="0x7f02645e8270"/>
        <function-ref name="getScale" scoped="" ref="0x7f02645e8748"/>
        <function-ref name="reset" scoped="" ref="0x7f02645eb5b8"/>
        <function-ref name="overflow" scoped="" ref="0x7f02645eb130"/>
        <function-ref name="isOn" scoped="" ref="0x7f02645e9930"/>
        <function-ref name="set" scoped="" ref="0x7f02645ecc28"/>
        <function-ref name="start" scoped="" ref="0x7f02645eba40"/>
        <function-ref name="stop" scoped="" ref="0x7f02645e9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f026455e940" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f026455e940"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f02651a7388"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f02651a7388"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f026455ec90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f0264552098" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f0264552098"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f026454e270"/>
        <function-ref name="test" scoped="" ref="0x7f026454f930"/>
        <function-ref name="get" scoped="" ref="0x7f0264552c18"/>
        <function-ref name="setScale" scoped="" ref="0x7f026454e6f8"/>
        <function-ref name="getScale" scoped="" ref="0x7f026454ebd0"/>
        <function-ref name="reset" scoped="" ref="0x7f0264551a58"/>
        <function-ref name="overflow" scoped="" ref="0x7f02645515d0"/>
        <function-ref name="isOn" scoped="" ref="0x7f026454fdb8"/>
        <function-ref name="set" scoped="" ref="0x7f02645510f8"/>
        <function-ref name="start" scoped="" ref="0x7f026454f020"/>
        <function-ref name="stop" scoped="" ref="0x7f026454f4a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f0264562b90" loc="45:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f0264562b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TThree" ref="0x7f02650dbd70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f026454b930"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f0264538270"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f026454bdb8"/>
        <function-ref name="overflow" scoped="" ref="0x7f02645386f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f0264538c58" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f0264538c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f0264535db8"/>
        <function-ref name="test" scoped="" ref="0x7f02645354a8"/>
        <function-ref name="get" scoped="" ref="0x7f0264537820"/>
        <function-ref name="setScale" scoped="" ref="0x7f0264533270"/>
        <function-ref name="getScale" scoped="" ref="0x7f0264533748"/>
        <function-ref name="reset" scoped="" ref="0x7f0264536658"/>
        <function-ref name="overflow" scoped="" ref="0x7f02645361d0"/>
        <function-ref name="isOn" scoped="" ref="0x7f0264535930"/>
        <function-ref name="set" scoped="" ref="0x7f0264537ca8"/>
        <function-ref name="start" scoped="" ref="0x7f0264536ae0"/>
        <function-ref name="stop" scoped="" ref="0x7f0264535020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f0264513450" loc="63:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f0264513450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TThree" ref="0x7f02650dbd70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f02645121d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f0264512ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f0264512658"/>
        <function-ref name="overflow" scoped="" ref="0x7f0264510020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f026452f270" loc="62:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f026452f270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f026511b430"/>
            <typename><typedef-ref name="TMicro" ref="0x7f026511b788"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f0264514020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f0264514930"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f02645144a8"/>
        <function-ref name="overflow" scoped="" ref="0x7f0264514db8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f0264507020" loc="47:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x7f0264507020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f0264507370"/>
        <function-ref name="offset" scoped="" ref="0x7f02645074f8"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f0264507680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f02644f70c0" loc="46:/opt/tinyos-2.1.2/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f02644f70c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f02644f7410"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f02644f7598"/>
        <function-ref name="led1On" scoped="" ref="0x7f02644f7720"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f02644f78a8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f02644f7a30"/>
        <function-ref name="get" scoped="" ref="0x7f02644f7bb8"/>
        <function-ref name="led1Off" scoped="" ref="0x7f02644f7d40"/>
        <function-ref name="led2Off" scoped="" ref="0x7f02644f64b8"/>
        <function-ref name="set" scoped="" ref="0x7f02644f6020"/>
        <function-ref name="led0On" scoped="" ref="0x7f02644f61a8"/>
        <function-ref name="led2On" scoped="" ref="0x7f02644f6330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f02644f1020" loc="50:/opt/tinyos-2.1.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f02644f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644f1370"/>
        <function-ref name="isInput" scoped="" ref="0x7f02644f14f8"/>
        <function-ref name="toggle" scoped="" ref="0x7f02644f1680"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02644f1808"/>
        <function-ref name="get" scoped="" ref="0x7f02644f1990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02644f1b18"/>
        <function-ref name="set" scoped="" ref="0x7f02644f1ca0"/>
        <function-ref name="clr" scoped="" ref="0x7f02644f1e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f02644f3368" loc="46:/opt/tinyos-2.1.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f02644f3368"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f02644f36b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f02644f0190" loc="51:/opt/tinyos-2.1.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f02644f0190"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644f04e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02644f0668"/>
        <function-ref name="toggle" scoped="" ref="0x7f02644f07f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02644f0978"/>
        <function-ref name="get" scoped="" ref="0x7f02644f0b00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02644f0c88"/>
        <function-ref name="set" scoped="" ref="0x7f02644f0e10"/>
        <function-ref name="clr" scoped="" ref="0x7f02644ef020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f02644f3930" loc="47:/opt/tinyos-2.1.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f02644f3930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f02644f3c80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f02644f3e08"/>
        <function-ref name="led1On" scoped="" ref="0x7f02644f2020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f02644f21a8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f02644f2330"/>
        <function-ref name="get" scoped="" ref="0x7f02644f24b8"/>
        <function-ref name="led1Off" scoped="" ref="0x7f02644f2640"/>
        <function-ref name="led2Off" scoped="" ref="0x7f02644f2c60"/>
        <function-ref name="set" scoped="" ref="0x7f02644f27c8"/>
        <function-ref name="led0On" scoped="" ref="0x7f02644f2950"/>
        <function-ref name="led2On" scoped="" ref="0x7f02644f2ad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f02644ef338" loc="52:/opt/tinyos-2.1.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f02644ef338"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644ef688"/>
        <function-ref name="isInput" scoped="" ref="0x7f02644ef810"/>
        <function-ref name="toggle" scoped="" ref="0x7f02644ef998"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02644efb20"/>
        <function-ref name="get" scoped="" ref="0x7f02644efca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02644efe30"/>
        <function-ref name="set" scoped="" ref="0x7f02644ee020"/>
        <function-ref name="clr" scoped="" ref="0x7f02644ee1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f02644d3090" loc="44:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f02644d3090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644d33e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f02644d3568"/>
        <function-ref name="toggle" scoped="" ref="0x7f02644d36f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02644d3878"/>
        <function-ref name="get" scoped="" ref="0x7f02644d3a00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02644d3b88"/>
        <function-ref name="set" scoped="" ref="0x7f02644d3d10"/>
        <function-ref name="clr" scoped="" ref="0x7f02644d2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f02644d2378" loc="45:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f02644d2378"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644d26c8"/>
        <function-ref name="isInput" scoped="" ref="0x7f02644d2850"/>
        <function-ref name="toggle" scoped="" ref="0x7f02644d29d8"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02644d2b60"/>
        <function-ref name="get" scoped="" ref="0x7f02644d2ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02644d2e70"/>
        <function-ref name="set" scoped="" ref="0x7f02644d1020"/>
        <function-ref name="clr" scoped="" ref="0x7f02644d11a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f02644d05e8" loc="47:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f02644d05e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f02644d0938"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f02644d1500" loc="46:/opt/tinyos-2.1.2/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f02644d1500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f02644d1850"/>
        <function-ref name="isInput" scoped="" ref="0x7f02644d19d8"/>
        <function-ref name="toggle" scoped="" ref="0x7f02644d1b60"/>
        <function-ref name="isOutput" scoped="" ref="0x7f02644d1ce8"/>
        <function-ref name="get" scoped="" ref="0x7f02644d1e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f02644d0020"/>
        <function-ref name="set" scoped="" ref="0x7f02644d01a8"/>
        <function-ref name="clr" scoped="" ref="0x7f02644d0330"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Timer" loc="53:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
      <documentation loc="36:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f0265085cd0" loc="53:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f0265085cd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f026505a760" loc="136:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="132:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f026505e110" loc="83:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="80:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f026505cd40" loc="114:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="100:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f026505c7a8" loc="114:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f026505cac0" loc="114:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f026505c070" loc="98:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="94:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f02650596b0" loc="151:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="146:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f026505ae80" loc="144:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="138:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f026505e888" loc="92:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="86:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f0265060820" loc="64:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="56:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f02650605b0" loc="64:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f026505bd28" loc="129:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="116:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f026505b790" loc="129:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f026505baa8" loc="129:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f026505f290" loc="73:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="66:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f026505f020" loc="73:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f026505fa38" loc="78:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
      <documentation loc="72:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f0265088378" loc="113:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
        <documentation loc="106:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0265088108" loc="113:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f0265086780" loc="138:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
        <documentation loc="132:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0265086510" loc="138:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f0265089748" loc="104:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
        <documentation loc="89:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f0265088b60" loc="130:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
        <documentation loc="115:/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/opt/tinyos-2.1.2/tos/interfaces/Boot.nc">
      <documentation loc="42:/opt/tinyos-2.1.2/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f026508a020" loc="60:/opt/tinyos-2.1.2/tos/interfaces/Boot.nc">
        <documentation loc="51:/opt/tinyos-2.1.2/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7f0264fea2b0" loc="80:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="60:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f0265003520"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f0264feb830" loc="80:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f0265003520"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f0264febb90" loc="80:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f0264fea020" loc="80:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f0264fe6628" loc="135:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="126:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f0264fe6060" loc="135:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f0264fe6370" loc="135:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f0264fe5828" loc="123:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="113:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f0264fe95b8" loc="96:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="82:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f0264fe9348" loc="96:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f0264fe8a00" loc="110:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="98:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f0264fe8458" loc="110:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f0264fe8780" loc="110:/opt/tinyos-2.1.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f0265181070" loc="67:/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f0265181860" loc="75:/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
      <documentation loc="33:/opt/tinyos-2.1.2/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f0265092428" loc="61:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="58:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f0265092b60" loc="67:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="63:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f0265091328" loc="72:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="69:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f02650901d8" loc="83:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="79:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f026508e810" loc="100:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="96:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f026508d020" loc="117:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="103:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f0265091a40" loc="77:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="74:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f026508db20" loc="134:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="120:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f026508d8b0" loc="134:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f0265093cd8" loc="56:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="53:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f0265090948" loc="89:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="86:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f026508e0d8" loc="94:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
        <documentation loc="91:/opt/tinyos-2.1.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LogRead" loc="51:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
      <documentation loc="40:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
        <short>&#10; Read interface for the log storage abstraction described in&#10; TEP103.</short>
        <long>&#10; Read interface for the log storage abstraction described in&#10; TEP103.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Gay&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:29 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="seek" ref="0x7f0265064020" loc="105:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
        <documentation loc="93:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
          <short>&#10; Set the read position in the log, using a cookie returned by the&#10; &#60;code>currentOffset&#60;/code> commands of &#60;code>LogRead&#60;/code> or&#10; &#60;code>LogWrite&#60;/code>, or the special value &#60;code>SEEK_BEGINNING&#60;/code>.</short>
          <long>&#10; Set the read position in the log, using a cookie returned by the&#10; &#60;code>currentOffset&#60;/code> commands of &#60;code>LogRead&#60;/code> or&#10; &#60;code>LogWrite&#60;/code>, or the special value &#60;code>SEEK_BEGINNING&#60;/code>.&#10;&#10; If the specified position has been overwritten, the read position&#10; will be set to the beginning of the log.&#10;&#10; @return &#10;   &#60;li>SUCCESS if the request was accepted, &#10;   &#60;li>EBUSY if a request is already being processed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogRead"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_cookie_t" ref="0x7f0265083938"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f0265065ce0" loc="105:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_cookie_t" ref="0x7f0265083938"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="currentOffset" ref="0x7f0265065328" loc="91:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
        <documentation loc="77:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
          <short>&#10; Return a &#34;cookie&#34; representing the current read offset within the&#10; log.</short>
          <long>&#10; Return a &#34;cookie&#34; representing the current read offset within the&#10; log. This cookie can be used in a subsequent seek operation to&#10; return to the same place in the log (if it hasn't been overwritten).&#10;&#10; @return Cookie representing current offset. &#10;   &#60;code>SEEK_BEGINNING&#60;/code> will be returned if:&#60;ul>&#10;   &#60;li> a write in a circular log overwrote the previous read position&#10;   &#60;li> seek was passed a cookie representing a position before the&#10;        current beginning of a circular log&#10;   &#60;/ul>&#10;   Note that &#60;code>SEEK_BEGINNING&#60;/code> can also be returned at&#10;   other times (just after erasing a log, etc).&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogRead"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="storage_cookie_t" ref="0x7f0265083938"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f0265069b58" loc="63:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
        <documentation loc="52:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
          <short>&#10; Initiate a read operation from the current position within a given log&#10; volume.</short>
          <long>&#10; Initiate a read operation from the current position within a given log&#10; volume. On SUCCESS, the &#60;code>readDone&#60;/code> event will signal&#10; completion of the operation.&#10; &#10; @param 'void* COUNT(len) buf' buffer to place read data.&#10; @param len number of bytes to read.&#10; @return &#10;   &#60;li>SUCCESS if the request was accepted, &#10;   &#60;li>EBUSY if a request is already being processed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogRead"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_len_t" ref="0x7f0265083538"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f0265069588" loc="63:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f02650698d8" loc="63:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_len_t" ref="0x7f0265083538"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="seekDone" ref="0x7f0265064b88" loc="115:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
        <documentation loc="107:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
          <short>&#10; Report success of seek operation.</short>
          <long>&#10; Report success of seek operation. If &#60;code>SUCCESS&#60;/code> is returned,&#10; the read position has been changed as requested. If other values are&#10; returned, the read position is undefined.&#10;&#10; @param error SUCCESS if the seek was succesful, EINVAL if the cookie&#10;   was invalid and FAIL for other errors.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogRead"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0265064918" loc="115:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSize" ref="0x7f0265062428" loc="124:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
        <documentation loc="117:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
          <short>&#10; Report approximate log capacity in bytes.</short>
          <long>&#10; Report approximate log capacity in bytes. Note that use of&#10; &#60;code>sync&#60;/code>, failures and general overhead may reduce the number&#10; of bytes available to the log. &#10;&#10; @return Volume size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogRead"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="storage_len_t" ref="0x7f0265083538"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f0265068358" loc="75:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
        <documentation loc="65:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
          <short>&#10; Signals the completion of a read operation.</short>
          <long>&#10; Signals the completion of a read operation. The current read position is&#10; advanced by &#60;code>len&#60;/code> bytes.&#10;&#10; @param addr starting address of read.&#10; @param 'void* COUNT(len) buf' buffer where read data was placed.&#10; @param len number of bytes read - this may be less than requested&#10;    (even equal to 0) if the end of the log was reached&#10; @param error SUCCESS if read was possible, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogRead"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_len_t" ref="0x7f0265083538"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f02650679d0" loc="75:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f0265067d20" loc="75:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_len_t" ref="0x7f0265083538"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f02650680c8" loc="75:/opt/tinyos-2.1.2/tos/interfaces/LogRead.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LogWrite" loc="42:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
      <function command="" provided="0" name="currentOffset" ref="0x7f026506e328" loc="82:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
        <documentation loc="71:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
          <short>&#10; Return a &#34;cookie&#34; representing the current append offset within the&#10; log.</short>
          <long>&#10; Return a &#34;cookie&#34; representing the current append offset within the&#10; log. This cookie can be used in a subsequent seek operation (see&#10; &#60;code>LogRead&#60;/code> to start reading from this place in the log (if&#10; it hasn't been overwritten).&#10;&#10; The current write position is not known before the first read, append,&#10; seek, erase or sync.&#10;&#10; @return Cookie representing current offset. &#10;</long>
        </documentation>
        <interfacedef-ref qname="LogWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="storage_cookie_t" ref="0x7f0265083938"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f026506b8c0" loc="118:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
        <documentation loc="113:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
          <short>&#10; Signals the successful or unsuccessful completion of a sync operation.</short>
          <long>&#10; Signals the successful or unsuccessful completion of a sync operation. &#10;&#10; @param error SUCCESS if the log was synchronised, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f026506b650" loc="118:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="erase" ref="0x7f026506ebb0" loc="93:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
        <documentation loc="84:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
          <short>&#10; Initiate an erase operation.</short>
          <long>&#10; Initiate an erase operation. On SUCCESS, the&#10; &#60;code>eraseDone&#60;/code> event will signal completion of the&#10; operation.&#10;&#10; @return &#10;   &#60;li>SUCCESS if the request was accepted, &#10;   &#60;li>EBUSY if a request is already being processed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="eraseDone" ref="0x7f026506c5d0" loc="100:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
        <documentation loc="95:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
          <short>&#10; Signals the completion of an erase operation.</short>
          <long>&#10; Signals the completion of an erase operation.&#10;&#10; @param error SUCCESS if the log was erased, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f026506c360" loc="100:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="appendDone" ref="0x7f0265070300" loc="68:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
        <documentation loc="56:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
          <short>&#10; Signals the completion of an append operation.</short>
          <long>&#10; Signals the completion of an append operation. However, data is not&#10; guaranteed to survive a power-cycle unless a commit operation has&#10; been completed.&#10;&#10; @param 'void* COUNT(len) buf' buffer that written data was read from.&#10; @param len number of bytes actually written (valid even in case of error)&#10; @param records_lost TRUE if this append destroyed some old records from&#10;   the beginning of the log (only possible for circular logs).&#10; @param error SUCCESS if append was possible, ESIZE if the (linear) log&#10;    is full and FAIL for other errors.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_len_t" ref="0x7f0265083538"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f026506f658" loc="68:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f026506f9a8" loc="68:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_len_t" ref="0x7f0265083538"/></typename>
            </type-int>
          </variable>
          <variable name="recordsLost" ref="0x7f026506fcf0" loc="68:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f0265070060" loc="69:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="append" ref="0x7f026507b7e8" loc="54:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
        <documentation loc="43:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
          <short>&#10; Append data to a given volume.</short>
          <long>&#10; Append data to a given volume. On SUCCESS, the &#60;code>appendDone&#60;/code> &#10; event will signal completion of the operation.&#10; &#10; @param 'void* COUNT(len) buf' buffer to write data from.&#10; @param len number of bytes to write.&#10; @return &#10;   &#60;li>SUCCESS if the request was accepted, &#10;   &#60;li>EINVAL if the request is invalid (len too large).&#10;   &#60;li>EBUSY if a request is already being processed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_len_t" ref="0x7f0265083538"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f026507b218" loc="54:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f026507b568" loc="54:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="storage_len_t" ref="0x7f0265083538"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f026506cd20" loc="111:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
        <documentation loc="102:/opt/tinyos-2.1.2/tos/interfaces/LogWrite.nc">
          <short>&#10; Ensure all writes are present on flash, and that failure in subsequent&#10; writes cannot cause loss of earlier writes.</short>
          <long>&#10; Ensure all writes are present on flash, and that failure in subsequent&#10; writes cannot cause loss of earlier writes. On SUCCES, the &#10; &#60;code>commitDone&#60;/code> event will signal completion of the operation.&#10;&#10; @return &#10;   &#60;li>SUCCESS if the request was accepted, &#10;   &#60;li>EBUSY if a request is already being processed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LogWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:/opt/tinyos-2.1.2/tos/lib/timer/LocalTime.nc">
      <documentation loc="36:/opt/tinyos-2.1.2/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f0264fa6be8" loc="53:/opt/tinyos-2.1.2/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f0264fa6be8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f0264fa34c8" loc="61:/opt/tinyos-2.1.2/tos/lib/timer/LocalTime.nc">
        <documentation loc="55:/opt/tinyos-2.1.2/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:/opt/tinyos-2.1.2/tos/interfaces/Init.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f0264faa0d8" loc="62:/opt/tinyos-2.1.2/tos/interfaces/Init.nc">
        <documentation loc="53:/opt/tinyos-2.1.2/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
      <documentation loc="36:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f0264f923f8" loc="57:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f0264f923f8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f0264f92628" loc="57:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f92628"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f0264f91020" loc="64:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
        <documentation loc="59:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f92628"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f0264f90070" loc="76:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
        <documentation loc="73:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f0264f91838" loc="71:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
        <documentation loc="66:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f0264f90760" loc="82:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
        <documentation loc="78:/opt/tinyos-2.1.2/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f0264f9fe10" loc="56:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f0264f9fe10"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f0264f9c068" loc="56:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f9c068"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f0264f98958" loc="109:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f9c068"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f0264f9ba78" loc="78:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f0264f98020" loc="103:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f9c068"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f9c068"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f0264f9aa08" loc="103:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f9c068"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f0264f9ad28" loc="103:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f9c068"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f0264f9a258" loc="88:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f0264f97110" loc="116:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f9c068"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f0264f9cb28" loc="66:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f9c068"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f0264f9c8b8" loc="66:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f9c068"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f0264f9b328" loc="73:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/opt/tinyos-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f0264f63d28" loc="89:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f0264f65c20" loc="85:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f0264f69a48" loc="79:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f0264f635c8" loc="86:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f0264f63358" loc="86:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f0264f654c0" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f0264f65250" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f0264f626e0" loc="90:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f0264f62470" loc="90:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f0264f661d8" loc="80:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f0264f66b00" loc="81:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f0264f66890" loc="81:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x7f0264f52328" loc="92:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x7f0264f553a0" loc="68:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x7f0264f55ab8" loc="74:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x7f0264f53328" loc="80:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x7f0264f52ad8" loc="98:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x7f0264f53af8" loc="86:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x7f0264f561d8" loc="57:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0265102978"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f0265102d80"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x7f0264f56b90" loc="63:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0265102978"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f0265102d80"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x7f0264f56920" loc="63:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f0265102978"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f0265102d80"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f0264f601c8" loc="41:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f601c8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7f0264f5c7f0" loc="74:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f0264f5fb60" loc="58:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f0264f60a80" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f601c8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f0264f5d290" loc="62:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f0264f5b020" loc="80:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f0264f5f420" loc="54:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f601c8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f0264f5f1b0" loc="54:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264f601c8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f0264f5d988" loc="65:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f0264f5c0d8" loc="68:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f0264f74418" loc="55:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f0264f74418"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7f0264f6f900" loc="98:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f0264f70a40" loc="87:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f0264f74cb8" loc="61:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f0264f74418"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7f0264f6e290" loc="104:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7f0264f6e020" loc="104:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7f0264f6ea10" loc="110:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f0264f714c0" loc="75:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f0264f73d50" loc="70:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f0264f6f1d8" loc="93:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f0264f73630" loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f0264f74418"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f0264f733c0" loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f0264f74418"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f0264f71bb8" loc="78:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f0264f70328" loc="81:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/opt/tinyos-2.1.2/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/opt/tinyos-2.1.2/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f02650b44f8" loc="62:/opt/tinyos-2.1.2/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/opt/tinyos-2.1.2/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f0265146940"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/opt/tinyos-2.1.2/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/opt/tinyos-2.1.2/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x7f02650d4e28" loc="76:/opt/tinyos-2.1.2/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/opt/tinyos-2.1.2/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/opt/tinyos-2.1.2/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/opt/tinyos-2.1.2/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f02650b5020" loc="52:/opt/tinyos-2.1.2/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/opt/tinyos-2.1.2/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x7f0264df6ae0" loc="60:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x7f0264df6870" loc="60:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x7f0264df92a8" loc="31:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x7f0264df9ca0" loc="39:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f0264df9a30" loc="39:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x7f0264df7758" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f0264df74e8" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f0265a87608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x7f0264df6020" loc="53:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f0264de3ab0" loc="44:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f0264de21d8" loc="45:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f0264de5d20" loc="42:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f0264de1020" loc="47:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f0264de3400" loc="43:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f0264de2890" loc="46:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f0264de5020" loc="40:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f0264de5690" loc="41:/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f026518c378" loc="57:/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f0265189258" loc="72:/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f026518ca90" loc="65:/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="At45db" loc="63:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
      <documentation loc="45:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <short>&#10; HAL for Atmel's AT45DB family of serial dataflash chips.</short>
        <long>&#10; HAL for Atmel's AT45DB family of serial dataflash chips. This provides&#10; reasonably high-level operations on AT45DB pages, including automatic&#10; buffer management. Writes are only guaranteed to happen after a flush,&#10; flushAll, sync or syncAll.&#10; &#60;p>&#10; When buffers are flushed to the flash (either explicitly or implicitly),&#10; their contents are checked to ensure the write was succesful. If this&#10; check fails, the flush is retried some number of times. If this fails&#10; more than some number of times, all access to the flash is disabled&#10; (all requests will report FAIL in their completion event).&#10; &#60;p>&#10; This interface only supports one operation at a time - components offering&#10; At45db should use the &#60;code>Resource&#60;/code> interface for resource sharing.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function event="" provided="0" name="readDone" ref="0x7f0264bfbbd8" loc="173:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="168:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Signal completion of a read operation.</short>
          <long>&#10; Signal completion of a read operation. The buffer passed to read&#10; is implictly returned.&#10; @param error SUCCESS for a successful read, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0264bfb968" loc="173:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f0264c00ba0" loc="136:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="132:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Signal completion of a sync or syncAll operation.</short>
          <long>&#10; Signal completion of a sync or syncAll operation. &#10; @param error SUCCESS if the sync was successful, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0264c00930" loc="136:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="flushDone" ref="0x7f0264bfe748" loc="154:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="150:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Signal completion of an flush or flushAll operation.</short>
          <long>&#10; Signal completion of an flush or flushAll operation. &#10; @param error SUCCESS if the flush was successful, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0264bfe4d8" loc="154:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f0264bfb020" loc="166:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="156:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Read some data from an AT45DB page.</short>
          <long>&#10; Read some data from an AT45DB page. readDone will be signaled.&#10; @param page Flash page to read from. Must be less than AT45_MAX_PAGES.&#10; @param offset Offset in page at which to start reading - must be between&#10;   0 and AT45_PAGE_SIZE - 1 &#10; @param data Buffer in which to place read data. The buffer is &#34;returned&#34;&#10;   at readDone time.&#10; @param n Number of bytes to read (> 0). offset + n must be &#60;= &#10;   AT45_PAGE_SIZE&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="page" ref="0x7f0264bfee68" loc="166:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
          <variable name="offset" ref="0x7f0264bfd228" loc="166:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f0264bfd9b0" loc="167:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="n" ref="0x7f0264bfdd10" loc="167:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f0264c07d68" loc="80:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="75:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Signal completion of a write operation.</short>
          <long>&#10; Signal completion of a write operation. The buffer passed to write&#10; is implictly returned.&#10; @param error SUCCESS for a successful write, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0264c07af8" loc="80:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="copyPage" ref="0x7f0264c05ad0" loc="91:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="82:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Copy one flash page to another.</short>
          <long>&#10; Copy one flash page to another. copyDone will be signaled. If page&#10; from had been modified, it is first flushed to flash. Page&#10; &#60;code>to&#60;/code> will only actually be written when the buffer holding&#10; it is flushed (see flush, flushAll, sync, syncAll).&#10;&#10; @param from Flash page to copy. Must be less than AT45_MAX_PAGES.&#10; @param to Flash page to overwrite. Must be less than AT45_MAX_PAGES.&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="from" ref="0x7f0264c05528" loc="91:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
          <variable name="to" ref="0x7f0264c05850" loc="91:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="erase" ref="0x7f0264c032e0" loc="111:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="98:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Erase an AT45DB page.</short>
          <long>&#10; Erase an AT45DB page. eraseDone will be signaled.&#10; @param page Flash page to erase. Must be less than AT45_MAX_PAGES.&#10; @param eraseKind How to handle the erase:&#10;   &#60;br>&#60;code>AT45_ERASE&#60;/code>: actually erase the page in the flash chip&#10;   &#60;br>&#60;code>AT45_DONT_ERASE&#60;/code>: don't erase the page in the flash &#10;     chip, but reserve a buffer for this page - subsequent writes to this&#10;     page will be faster because the old contents need not be read&#10;   &#60;br>&#60;code>AT45_PREVIOUSLY_ERASED&#60;/code>: assume the page was previously&#10;     erased in the flash and reserve a buffer for this page - subsequent&#10;     writes to page will be faster because the old contents need not be &#10;     read and the write itself will be faster&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="page" ref="0x7f0264c04cc8" loc="111:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
          <variable name="eraseKind" ref="0x7f0264c03060" loc="111:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="eraseDone" ref="0x7f0264c02020" loc="116:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="112:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Signal completion of an erase operation.</short>
          <long>&#10; Signal completion of an erase operation. &#10; @param error SUCCESS if the erase was successful, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0264c03c48" loc="116:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="computeCrcDone" ref="0x7f0264bf8020" loc="194:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="189:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Signal completion of a CRC computation.</short>
          <long>&#10; Signal completion of a CRC computation.&#10; @param error SUCCESS if the CRC was successfully computed, FAIL otherwise&#10; @param crc CRC value (valid only if error == SUCCESS)&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0264bf9a08" loc="194:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
          <variable name="crc" ref="0x7f0264bf9d28" loc="194:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f0264bff598" loc="144:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="138:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Flush an AT45DB page from the buffers to the actual flash.</short>
          <long>&#10; Flush an AT45DB page from the buffers to the actual flash. flushDone&#10; will be signaled once the flush has been initiated. If the page is not&#10; in the buffers, flushDone will succeed &#34;immediately&#34;.&#10; @param page Flash page to sync. Must be less than AT45_MAX_PAGES.&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="page" ref="0x7f0264bff328" loc="144:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="syncAll" ref="0x7f0264c001d8" loc="131:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="126:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Flush all AT45DB buffers to the actual flash.</short>
          <long>&#10; Flush all AT45DB buffers to the actual flash. syncDone&#10; will be signaled once the flush has been completed and the buffer &#10; contents successfully compared with the flash. &#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flushAll" ref="0x7f0264bffd78" loc="149:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="145:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Flush all AT45DB buffers to the actual flash.</short>
          <long>&#10; Flush all AT45DB buffers to the actual flash. flushDone&#10; will be signaled once the flushes have been initiated. &#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f0264c072c0" loc="73:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="64:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Write some data to an AT45DB page.</short>
          <long>&#10; Write some data to an AT45DB page. writeDone will be signaled.&#10; @param page Flash page to write to. Must be less than AT45_MAX_PAGES.&#10; @param offset Offset in page at which to start writing - must be between&#10;   0 and AT45_PAGE_SIZE - 1 &#10; @param data Data to write. The buffer is &#34;returned&#34; at writeDone time.&#10; @param n Number of bytes to write (> 0). offset + n must be &#60;= &#10;   AT45_PAGE_SIZE&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="page" ref="0x7f0264c08060" loc="73:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
          <variable name="offset" ref="0x7f0264c083f0" loc="73:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f0264c08b78" loc="74:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="n" ref="0x7f0264c07020" loc="74:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f0264c02998" loc="125:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="118:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Flush an AT45DB page from the buffers to the actual flash.</short>
          <long>&#10; Flush an AT45DB page from the buffers to the actual flash. syncDone&#10; will be signaled once the flush has been completed and the buffer &#10; contents successfully compared with the flash. If the page is not&#10; in the buffers, syncDone will succeed &#34;immediately&#34;.&#10; @param page Flash page to sync. Must be less than AT45_MAX_PAGES.&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="page" ref="0x7f0264c02728" loc="125:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="computeCrc" ref="0x7f0264bf90d8" loc="187:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="175:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Compute the CRC of some data from an AT45DB page (using the CRC&#10; function from crc.h).</short>
          <long>&#10; Compute the CRC of some data from an AT45DB page (using the CRC&#10; function from crc.h). computeCrcDone will be signaled.&#10; @param page Flash page to read from. Must be less than AT45_MAX_PAGES.&#10; @param offset Offset in page at which to start reading - must be between&#10;   0 and AT45_PAGE_SIZE - 1 &#10; @param n Number of bytes to read (> 0). offset + n must be &#60;= &#10;   AT45_PAGE_SIZE&#10; @param baseCrc initial CRC value - use 0 if computing a &#34;standalone&#34;&#10;   CRC, or a previous computeCrc result if computing a CRC over several&#10;   flash pages&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="page" ref="0x7f0264bfa378" loc="187:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
          <variable name="offset" ref="0x7f0264bfa708" loc="187:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
          <variable name="n" ref="0x7f0264bfaa88" loc="188:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
          <variable name="baseCrc" ref="0x7f0264bfadd0" loc="188:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="copyPageDone" ref="0x7f0264c045b8" loc="96:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
        <documentation loc="92:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
          <short>&#10; Signal completion of a copyPage operation.</short>
          <long>&#10; Signal completion of a copyPage operation. &#10; @param error SUCCESS if the copy was successful, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f0264c04348" loc="96:/opt/tinyos-2.1.2/tos/chips/at45db/At45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="At45dbVolume" loc="18:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbVolume.nc">
      <documentation loc="13:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbVolume.nc">
        <short>&#10; AT45DB interface for managing flash volumes.</short>
        <long>&#10; AT45DB interface for managing flash volumes.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="volumeSize" ref="0x7f0264bf4898" loc="30:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbVolume.nc">
        <documentation loc="26:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbVolume.nc">
          <short>&#10; Find the flash volume size&#10; </short>
          <long>&#10; Find the flash volume size&#10; @return Flash volume size in pages&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45dbVolume"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="remap" ref="0x7f0264bf40a8" loc="24:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbVolume.nc">
        <documentation loc="19:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbVolume.nc">
          <short>&#10; Map a volume page to the corresponding page in the whole flash&#10; </short>
          <long>&#10; Map a volume page to the corresponding page in the whole flash&#10; @return What flash page this volume page maps to, or &#10;   AT45_MAX_PAGES for invalid volumes&#10;</long>
        </documentation>
        <interfacedef-ref qname="At45dbVolume"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="volumePage" ref="0x7f0264c09df0" loc="24:/opt/tinyos-2.1.2/tos/chips/at45db/At45dbVolume.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
      <documentation loc="63:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f0264bf1d48" loc="120:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
        <documentation loc="104:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f0264bf2d98" loc="97:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
        <documentation loc="90:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f0264bf24a8" loc="88:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
        <documentation loc="78:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f0264bf15e8" loc="102:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
        <documentation loc="99:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f0264bf0848" loc="128:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
        <documentation loc="122:/opt/tinyos-2.1.2/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f0264ac5598" loc="56:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f0264ac4608" loc="73:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f0264ac9d30" loc="46:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f0264ac5d98" loc="65:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f0264ac3020" loc="81:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/opt/tinyos-2.1.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:/opt/tinyos-2.1.2/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:/opt/tinyos-2.1.2/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f0264ac7c28" loc="90:/opt/tinyos-2.1.2/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:/opt/tinyos-2.1.2/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f0264ac1458" loc="98:/opt/tinyos-2.1.2/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:/opt/tinyos-2.1.2/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAt45db" loc="23:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
      <documentation loc="10:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <short>&#10; HPL for Atmel's AT45DB family of serial dataflash chips.</short>
        <long>&#10; HPL for Atmel's AT45DB family of serial dataflash chips. &#10; Provides access to all basic AT45DB operations plus operations to &#10; wait for the flash to go idle or finish a comparison. See the AT45DB&#10; family datasheets for full details on these operations.&#10; &#60;p>&#10; This interface only supports one operation at a time.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function event="" provided="0" name="readDone" ref="0x7f0264aacb98" loc="141:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="137:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Signaled when data has been read from the buffer.</short>
          <long>&#10; Signaled when data has been read from the buffer. The data buffer&#10; is &#34;returned&#34;.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="waitCompare" ref="0x7f0264ab9c48" loc="41:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="37:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Wait for a buffer-flash comparison to complete.</short>
          <long>&#10; Wait for a buffer-flash comparison to complete. waitCompareDone will&#10; be signaled when that occurs.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="crcDone" ref="0x7f0264aa9020" loc="163:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="159:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Signaled when CRC has been computed.</short>
          <long>&#10; Signaled when CRC has been computed.&#10; @param computedCrc CRC value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="computedCrc" ref="0x7f0264aaac70" loc="163:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="flushDone" ref="0x7f0264ab40d8" loc="79:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="75:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Signaled when flush command sent (use waitIdle to detect when&#10; flush command completes)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f0264aac2d0" loc="134:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="122:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Read directly from flash.</short>
          <long>&#10; Read directly from flash. readDone will be signaled.&#10; @param cmd AT45_C_READ_CONTINUOUS or AT45_C_READ_PAGE. When the end of&#10;   a page is read, AT45_C_READ_CONTINUOUS continues on the next page,&#10;   while AT45_C_READ_PAGE continues at the start of the same page.&#10; @param page Page to read from&#10; @param offset Offset in page at which to start reading - must be between&#10;   0 and AT45_PAGE_SIZE - 1 &#10; @param data Buffer in which to place read data. The buffer is &#34;returned&#34;&#10;   at readDone time.&#10; @param n Number of bytes to read (> 0).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f0264aafbd0" loc="134:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
          <variable name="page" ref="0x7f0264aae020" loc="134:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
          <variable name="offset" ref="0x7f0264aae3b0" loc="134:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f0264aaeba8" loc="135:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="n" ref="0x7f0264aac020" loc="135:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="erase" ref="0x7f0264ab22a0" loc="100:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="95:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Erase a flash page.</short>
          <long>&#10; Erase a flash page. eraseDone will be signaled.&#10; @param cmd must be AT45_C_ERASE_PAGE&#10; @param page Page to compare with (must be less than AT45_MAX_PAGES)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f0264ab3c08" loc="100:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
          <variable name="page" ref="0x7f0264ab2020" loc="100:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f0264aa6788" loc="185:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="181:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Signaled when data has been written to the buffer.</short>
          <long>&#10; Signaled when data has been written to the buffer. The data buffer&#10; is &#34;returned&#34;.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="waitIdleDone" ref="0x7f0264ab9550" loc="35:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="32:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Signaled when the flash is idle.</short>
          <long>&#10; Signaled when the flash is idle.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="waitCompareDone" ref="0x7f0264ab8648" loc="47:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="43:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Signaled when the buffer-flash comparison is complete.</short>
          <long>&#10; Signaled when the buffer-flash comparison is complete.&#10; @param compareOk TRUE if the comparison succeeded, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="compareOk" ref="0x7f0264ab83d8" loc="47:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="eraseDone" ref="0x7f0264ab29f0" loc="106:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="102:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Signaled when erase command sent (use waitIdle to detect when&#10; erase command completes)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="waitIdle" ref="0x7f0264abcd18" loc="30:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="24:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Wait for a &#34;Group A&#34; operation to complete (essentially all non-buffer&#10; operations).</short>
          <long>&#10; Wait for a &#34;Group A&#34; operation to complete (essentially all non-buffer&#10; operations). You should use waitComapre if you are waiting for a&#10; comparison to complete. waitIdleDone will be signaled when the operation&#10; is complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f0264ab57e8" loc="73:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="63:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Write a buffer to a flash page.</short>
          <long>&#10; Write a buffer to a flash page. flushDone will be signaled.&#10; @param cmd AT45_C_FLUSH_BUFFER1 to write buffer 1 to flash,&#10;   AT45_C_FLUSH_BUFFER2 to write buffer 2 to flash,&#10;   AT45_C_QFLUSH_BUFFER1 to write buffer 1 to flash w/o erase&#10;   (page must have been previously erased),&#10;   AT45_C_QFLUSH_BUFFER2 to write buffer 2 to flash w/o erase&#10;   (page must have been previously erased),&#10; @param page Page to write (must be less than AT45_MAX_PAGES)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f0264ab5228" loc="73:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
          <variable name="page" ref="0x7f0264ab5568" loc="73:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f0264aa8c00" loc="178:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="165:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Write some data to a flash buffer, and optionally the flash itself.</short>
          <long>&#10; Write some data to a flash buffer, and optionally the flash itself. &#10; writeDone will be signaled.&#10; @param cmd One of AT45_C_WRITE_BUFFER1/2 or AT45_C_WRITE_MEM_BUFFER1/2&#10;   to write respectively to buffer 1/2, or to buffer 1/2 and the &#10;   specified main memory page.&#10; @param page Page to write when cmd is AT45_C_WRITE_MEM_BUFFER1/2&#10; @param offset Offset in page at which to start writing - must be between&#10;   0 and AT45_PAGE_SIZE - 1 &#10; @param data Data to write. The buffer is &#34;returned&#34; at writeDone time.&#10; @param n Number of bytes to write (> 0). offset + n must be &#60;= &#10;   AT45_PAGE_SIZE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f0264aa96d0" loc="178:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
          <variable name="page" ref="0x7f0264aa9a10" loc="178:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
          <variable name="offset" ref="0x7f0264aa9da0" loc="178:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f0264aa85f0" loc="179:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="n" ref="0x7f0264aa8950" loc="179:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="compareDone" ref="0x7f0264ab3540" loc="93:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="89:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Signaled when compare command sent (use waitCompare to detect when&#10; compare command completes and find out comparison result)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compare" ref="0x7f0264ab4d48" loc="87:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="81:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Compare a page from flash with a buffer.</short>
          <long>&#10; Compare a page from flash with a buffer. compareDone will be signaled.&#10; @param cmd AT45_C_COMPARE_BUFFER1 to compare buffer 1, &#10;   AT45_C_COMPARE_BUFFER2 to compare buffer 2&#10; @param page Page to compare with (must be less than AT45_MAX_PAGES)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f0264ab4788" loc="87:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
          <variable name="page" ref="0x7f0264ab4ac8" loc="87:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="crc" ref="0x7f0264aaa310" loc="157:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="143:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Compute CRC of data in a flash buffer (using the CRC function from crc.h).</short>
          <long>&#10; Compute CRC of data in a flash buffer (using the CRC function from crc.h).&#10; crcDone will be signaled.&#10; @param cmd AT45_C_READ_BUFFER1 to compute CRC from buffer 1,&#10;   AT45_C_READ_BUFFER2 to compute CRC from buffer 2&#10; @param page ignored (reserved for future use)&#10; @param offset Offset in page at which to start reading - must be between&#10;   0 and AT45_PAGE_SIZE - 1 &#10; @param n Number of bytes to read (> 0). offset + n must be &#60;= &#10;   AT45_PAGE_SIZE&#10; @param baseCrc initial CRC value - use 0 if computing a &#34;standalone&#34;&#10;   CRC, or a previous crc result if computing a CRC over several&#10;   flash pages&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f0264aab278" loc="157:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
          <variable name="page" ref="0x7f0264aab5b8" loc="157:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
          <variable name="offset" ref="0x7f0264aab948" loc="157:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
          <variable name="n" ref="0x7f0264aabcc8" loc="158:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
          <variable name="baseCrc" ref="0x7f0264aaa060" loc="158:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="readBuffer" ref="0x7f0264aaf2c0" loc="119:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="108:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Read from a flash buffer.</short>
          <long>&#10; Read from a flash buffer. readDone will be signaled.&#10; @param cmd AT45_C_READ_BUFFER1 to read from buffer 1,&#10;   AT45_C_READ_BUFFER2 to read from buffer 2&#10; @param offset Offset in page at which to start reading - must be between&#10;   0 and AT45_PAGE_SIZE - 1 &#10; @param data Buffer in which to place read data. The buffer is &#34;returned&#34;&#10;   at readDone time.&#10; @param n Number of bytes to read (> 0). offset + n must be &#60;= &#10;   AT45_PAGE_SIZE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f0264ab0108" loc="119:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
          <variable name="offset" ref="0x7f0264ab0498" loc="119:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45pageoffset_t" ref="0x7f0265081568"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f0264ab0c90" loc="120:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="n" ref="0x7f0264aaf020" loc="120:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fillDone" ref="0x7f0264ab7ae8" loc="61:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="57:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Signaled when fill command sent (use waitIdle to detect when&#10; fill command completes)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="fill" ref="0x7f0264ab7348" loc="55:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
        <documentation loc="49:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
          <short>&#10; Read a page from flash into a buffer.</short>
          <long>&#10; Read a page from flash into a buffer. fillDone will be signaled.&#10; @param cmd AT45_C_FILL_BUFFER1 to read into buffer 1, &#10;   AT45_C_FILL_BUFFER2 to read into buffer 2&#10; @param page Page to read (must be less than AT45_MAX_PAGES)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45db"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f0264ab8d40" loc="55:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
          <variable name="page" ref="0x7f0264ab70c8" loc="55:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45db.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="at45page_t" ref="0x7f0265081168"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:/opt/tinyos-2.1.2/tos/lib/timer/BusyWait.nc">
      <documentation loc="36:/opt/tinyos-2.1.2/tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f0264aa5708" loc="59:/opt/tinyos-2.1.2/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f0264aa5708"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f0264aa5938" loc="59:/opt/tinyos-2.1.2/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264aa5938"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f0264aa2428" loc="66:/opt/tinyos-2.1.2/tos/lib/timer/BusyWait.nc">
        <documentation loc="61:/opt/tinyos-2.1.2/tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264aa5938"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f0264aa21b8" loc="66:/opt/tinyos-2.1.2/tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264aa5938"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAt45dbByte" loc="24:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
        <short>&#10; Interface between generic byte-at-a-time AT45DB HPL implementation and&#10; its platform specific aspects.</short>
        <long>&#10; Interface between generic byte-at-a-time AT45DB HPL implementation and&#10; its platform specific aspects.&#10; &#60;p>&#10; Each platform must provide its own HPL implementation for its AT45DB&#10; flash chip. To simplify this task, this directory provides a generic HPL&#10; implementation (HplAt45dbByteC) which can easily be used to build an&#10; AT45DB HPL by connecting it to a byte-at-a-time SPI interface, and an&#10; implementation of the operations of this interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCompareStatus" ref="0x7f0264a10788" loc="42:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
        <documentation loc="37:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
          <short>&#10; This command may be called immediately after idle is signaled.</short>
          <long>&#10; This command may be called immediately after idle is signaled. It&#10; must report the flash's current compare status.&#10; @return TRUE if the last compare succeeded, FALSE if it failed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45dbByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="waitIdle" ref="0x7f0264a117f8" loc="31:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
        <documentation loc="25:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
          <short>&#10; Wait for the flash chip to report that it is idle.</short>
          <long>&#10; Wait for the flash chip to report that it is idle. This command is&#10; called immediately after sending a status request command to the&#10; flash, so it is sufficient to wait for the flash's data pin to go&#10; high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45dbByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="idle" ref="0x7f0264a10020" loc="35:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
        <documentation loc="32:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
          <short>&#10; Signaled when the flash chip is idle.</short>
          <long>&#10; Signaled when the flash chip is idle.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45dbByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="select" ref="0x7f0264a0f020" loc="47:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
        <documentation loc="44:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
          <short>&#10; Assert the flash's select pin.</short>
          <long>&#10; Assert the flash's select pin.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45dbByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="deselect" ref="0x7f0264a0f700" loc="52:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
        <documentation loc="49:/opt/tinyos-2.1.2/tos/chips/at45db/HplAt45dbByte.nc">
          <short>&#10; Deassert the flash's select pin.</short>
          <long>&#10; Deassert the flash's select pin.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAt45dbByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:/opt/tinyos-2.1.2/tos/interfaces/SpiByte.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f0264a12290" loc="45:/opt/tinyos-2.1.2/tos/interfaces/SpiByte.nc">
        <documentation loc="40:/opt/tinyos-2.1.2/tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f0264a12020" loc="45:/opt/tinyos-2.1.2/tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:/opt/tinyos-2.1.2/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:/opt/tinyos-2.1.2/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f02649880d8" loc="65:/opt/tinyos-2.1.2/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:/opt/tinyos-2.1.2/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f02649898f8" loc="59:/opt/tinyos-2.1.2/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:/opt/tinyos-2.1.2/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:/opt/tinyos-2.1.2/tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:/opt/tinyos-2.1.2/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f026496d020" loc="53:/opt/tinyos-2.1.2/tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:/opt/tinyos-2.1.2/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f026496d8e8" loc="61:/opt/tinyos-2.1.2/tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:/opt/tinyos-2.1.2/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f0264962ac8" loc="79:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f026496bc40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f0264962858" loc="79:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f026496bc40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f0264966ae8" loc="53:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f02649635e8" loc="62:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f026496bc40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f0264963378" loc="62:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f026496bc40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f0264962020" loc="70:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:/opt/tinyos-2.1.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f026496bc40"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
      <documentation loc="42:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f02648e9b70" loc="65:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="58:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648e9900" loc="65:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f02648e1b50" loc="78:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="67:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648e18e0" loc="78:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f02648dee78" loc="126:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="109:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648de8b0" loc="126:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f02648debc0" loc="126:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f02648de020" loc="106:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="96:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f02648e0020" loc="94:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="80:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648df998" loc="94:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f02648dfca8" loc="94:/opt/tinyos-2.1.2/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:/opt/tinyos-2.1.2/tos/interfaces/Receive.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f02648e7b78" loc="78:/opt/tinyos-2.1.2/tos/interfaces/Receive.nc">
        <documentation loc="58:/opt/tinyos-2.1.2/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
              <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648e7278" loc="78:/opt/tinyos-2.1.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f02648e75a0" loc="78:/opt/tinyos-2.1.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f02648e78b0" loc="78:/opt/tinyos-2.1.2/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f02648dbcc8" loc="59:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648dba58" loc="59:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f02648c6020" loc="71:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648c8cb0" loc="71:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f02648c5108" loc="85:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648c6e28" loc="85:/opt/tinyos-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
      <documentation loc="42:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f02648ce3b0" loc="177:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="164:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f0265003168"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f02648ce140" loc="177:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f02648d8290" loc="88:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="80:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f0265003520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f02648d8020" loc="88:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f02648da7a8" loc="68:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="63:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f0265003520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f02648d9290" loc="78:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="70:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f0265003520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f02648d9020" loc="78:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f02648d5a28" loc="121:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="105:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f0265003520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f02648d5470" loc="121:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f02648d57a8" loc="121:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f0265003520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f02648d65d8" loc="103:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="90:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f0265003520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f02648d6020" loc="103:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f02648d6358" loc="103:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f0265003520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f02648d1020" loc="147:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f0265004d78"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f02648d3cf8" loc="147:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f02648d02a0" loc="162:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="149:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f0265004d78"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f02648d1ce8" loc="162:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f02648d0020" loc="162:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f0265004d78"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f02648d2bf8" loc="136:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="123:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f02648d2988" loc="136:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f02648cd7b8" loc="187:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="179:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f0265003168"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f02648cd208" loc="187:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f02648cd538" loc="187:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f0265003168"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f02648cb560" loc="195:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="189:/opt/tinyos-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f0265003168"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f02648b90b8" loc="75:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="57:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648bcaa8" loc="75:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f02648bcdb8" loc="75:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f02648b4380" loc="125:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="115:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648b5d48" loc="125:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f02648b40c8" loc="125:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f02648b5540" loc="112:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="102:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f02648b8338" loc="89:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="77:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648b80c8" loc="89:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f02648b6708" loc="100:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f02648b6160" loc="100:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f02648b6488" loc="100:/opt/tinyos-2.1.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f02648572a0" loc="31:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f0264858b70" loc="31:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f0264857020" loc="31:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f026485a458" loc="15:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f02648582a0" loc="23:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f026485ac70" loc="23:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:135" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f0264feeb28"/>
                <typename><typedef-ref name="message_t" ref="0x7f0264feb0c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f0264858020" loc="23:/opt/tinyos-2.1.2/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:/opt/tinyos-2.1.2/tos/interfaces/StdControl.nc">
      <documentation loc="72:/opt/tinyos-2.1.2/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f0264841e20" loc="95:/opt/tinyos-2.1.2/tos/interfaces/StdControl.nc">
        <documentation loc="88:/opt/tinyos-2.1.2/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f026483e600" loc="105:/opt/tinyos-2.1.2/tos/interfaces/StdControl.nc">
        <documentation loc="97:/opt/tinyos-2.1.2/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:/opt/tinyos-2.1.2/tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f026483c328" loc="54:/opt/tinyos-2.1.2/tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:/opt/tinyos-2.1.2/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f0264840bb0" loc="49:/opt/tinyos-2.1.2/tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:/opt/tinyos-2.1.2/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f0264846070" loc="56:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f02648453e0" loc="72:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f0264843020" loc="94:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f0264844c38" loc="94:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f0264845bf8" loc="79:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f0264846b60" loc="65:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f02648468f0" loc="65:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f0264843818" loc="100:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f0264844490" loc="85:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:/opt/tinyos-2.1.2/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f026484fde0" loc="71:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f026484d6e0" loc="81:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f026484f4e0" loc="62:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f026484f270" loc="62:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f026484c290" loc="91:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f026484c020" loc="91:/opt/tinyos-2.1.2/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f0264852e60" loc="62:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f026484aa40" loc="69:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f026484a7d0" loc="69:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f02648494f0" loc="80:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f0264849280" loc="80:/opt/tinyos-2.1.2/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
      <documentation loc="32:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f026471d2a0" loc="48:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
        <documentation loc="39:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f0264721c28" loc="48:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f026471d020" loc="48:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f0264719c28" loc="79:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
        <documentation loc="74:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f02647199b8" loc="79:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f0264718988" loc="90:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
        <documentation loc="81:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f02647183e8" loc="90:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f0264718708" loc="90:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f026471a948" loc="65:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
        <documentation loc="59:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f02647172b0" loc="99:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
        <documentation loc="92:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f0264716898" loc="99:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f0264716bb8" loc="99:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f0264717020" loc="99:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f0264719258" loc="72:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
        <documentation loc="67:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f026471ca18" loc="57:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
        <documentation loc="50:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f026471c140" loc="57:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f026471c460" loc="57:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f0265a88b98"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f026471c788" loc="57:/opt/tinyos-2.1.2/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:/opt/tinyos-2.1.2/tos/interfaces/UartByte.nc">
      <documentation loc="32:/opt/tinyos-2.1.2/tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f02646f7630" loc="46:/opt/tinyos-2.1.2/tos/interfaces/UartByte.nc">
        <documentation loc="39:/opt/tinyos-2.1.2/tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f02646f73c0" loc="46:/opt/tinyos-2.1.2/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f02646f6408" loc="56:/opt/tinyos-2.1.2/tos/interfaces/UartByte.nc">
        <documentation loc="48:/opt/tinyos-2.1.2/tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f02646f7e20" loc="56:/opt/tinyos-2.1.2/tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f02646f6188" loc="56:/opt/tinyos-2.1.2/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f02646e3e70" loc="44:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f02646e3070" loc="42:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x7f02646df4a8" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f02646df238" loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f02646e04e8" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f02646e41d8" loc="40:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f02646e48f8" loc="41:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f02646e3790" loc="43:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f0265185ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x7f02646e2578" loc="45:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f02646e2e30" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f02646e2bc0" loc="46:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f02646e0b98" loc="48:/opt/tinyos-2.1.2/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0x7f0264604020" loc="81:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f02646013a0" loc="87:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f0264605070" loc="79:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f02646004c0" loc="91:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f0264601d10" loc="88:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f0264601aa0" loc="88:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f02646032d0" loc="83:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f0264603060" loc="83:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f0264600e38" loc="92:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f0264600bc8" loc="92:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f02646057a0" loc="80:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0x7f0264603bf8" loc="84:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f0264603988" loc="84:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f0264604948" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f02646046d8" loc="82:/opt/tinyos-2.1.2/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f0265a88160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f0264607b60" loc="40:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264607b60"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x7f02645f8648" loc="88:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x7f02645f83d8" loc="88:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f02645f9568" loc="76:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f02645fd438" loc="47:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264607b60"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f02645fb748" loc="60:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264607b60"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f02645fb4d8" loc="60:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264607b60"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f02645fa020" loc="64:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f02645f9cb8" loc="82:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f02651aa9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f02645fdd70" loc="53:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264607b60"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f02645fdb00" loc="53:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f0264607b60"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f02645fa718" loc="67:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f02645fae00" loc="70:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:/opt/tinyos-2.1.2/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
